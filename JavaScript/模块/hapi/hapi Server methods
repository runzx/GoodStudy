Server methods （异步方式）

服务器方法是通过将函数连接到服务器对象来共享函数的一种有用方法，而不是在需要的地方都需要公用模块。

1. 第一种：
    const add = function (x, y, next) {
        // next 回调被用来传回结果！
        next(null, x + y);
    };

    server.method('add', add, {});

2， 第二种
    const add = function (x, y, next) {
        next(null, x + y);
    };

    server.method({
        name: 'add',
        method: add,    // 此函数不限参数，最一个必须是 回调cb !
                            cb回调接受三个参数：err，result和ttl
                                此函数发生错误，请将其作为第一个参数传递。
                                没有错误，则第一个参数应该是未定义的或为空，
                                并且返回值作为第二个参数传递。
                                该ttl参数用于告诉hapi返回值可以被缓存多久; 
                                    如果指定为0那么值永远不会被缓存。
        options: {}
    });                 // 对象方式，可读性强

    server.method('math.add', add);

3. 调用
    server.methods[name]()
    server.methods.add()
    server.methods.math.add()

4. options :
    1)设置 服务器方式的cache方式
    server.method('add', add, {
        cache: {
            expiresIn: 60000,   // ms 
            expiresAt: '20:30', //此不能和上面参数一起使用！用“HH：MM”格式以24小时表示法表示的时间，此时路由的所有高速缓存记录都将过期。使用当地时间。
            staleIn: 30000,     // ms
            staleTimeout: 10000,
            generateTimeout: 100,
            segment : 'xxx',
            cache : 'redis-cache' //optional 其为服务器上配置的名称
        }
    });
    这方法 应是Policy 级cache.
    则返回值将被缓存并从那里被服务，而不是每次调用时重新运行你的方法。
    2) Generate a custom key
        用于根据传递给您的方法的参数生成密钥。如果你的方法只接受字符串，数字和布尔值的组合，hapi会为你生成一个合理的密钥。但是，
            如果您的方法接受一个对象参数，则应该指定一个函数，该函数将生成类似于以下内容的键：
        const sum = function (array, next) {
            let total = 0;

            array.forEach((item) => {
                total += item;
            });

            next(null, total);
        };

        server.method('sum', sum, {
            generateKey: function (array) {
                return array.join(',');
            }
        });     //任何传递给你的方法的参数都可以用于generateKey方法，而不是回调函数。
    3) bind 该bind选项更改this方法中的上下文。
        当添加方法时，它默认为当前活动的上下文。这可以用于传递数据库客户端，
        而无需将其作为参数传递并需要自定义generateKey函数，如下所示：

        const lookup = function (id, next) {
            // calls myDB.getOne
            this.getOne({ id: id }, (err, value) => {
                next(err, value);
            });
        };

        server.method('lookup', lookup, { bind: myDB });