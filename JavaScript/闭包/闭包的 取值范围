

1. Javascript特殊的变量作用域。
    变量的作用域无非就是两种：全局变量和局部变量。
        Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。
        在函数外部自然无法读取函数内的局部变量。
    函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！

2. "闭包"（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。
    由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，
        因此可以把闭包简单理解成"定义在一个函数内部的函数"。
    作用：
        可以读取函数内部的变量，
        让这些变量的值始终保持在内存中。

3. 使用闭包的注意点
    1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。
        解决方法是，在退出函数之前，将不使用的局部变量全部删除。
    2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），
        这时一定要小心，不要随便改变父函数内部变量的值。

    Javascript 中，每个函数都有一个与之相关联的作用域链。
        每次调用 JavaScript 函数的时候，都会为之创建一个新的对象用来保存局部变量，并把这个对象添加至作用域链中。
        当函数返回时，再将这个对象删除，此对象会被当做垃圾回收。但如果这个函数定义了嵌套的函数，并将它存储在某处的属性里，
        就意味着有了一个外部引用指向这个嵌套的函数。它就不会被当作垃圾回收，它所指向的变量绑定对象同样不会被回收
    闭包是由函数引用其周边状态（词法环境）绑在一起形成的（封装）组合结构。在 JavaScript 中，闭包在每个函数被创建时形成。


4. 作用域链 ？？？