
1. 文本文件格式
    utf-8
    GBK
    BIG5

2. python2  python3
    str     bytes
    unicode str
    python2 写入文件前对unicode编码，读入文件后对2进制字符串解码
    python3 open()指定't'的文本模式，endcoding指定编码格式

    处理文本文件
        （python2, 3不用加u）
        s = u'你好'   
        a = s.encode('utf-8') : 6个字节，GBK 4个
            b'\xe4\xbd\xa0\xe5\xa5\xbd'
        
        （python3 ）
        f = open('file.txt', 'wt', encoding='utf8')
        f.write('你好，我爱python')
        f.close()

        f = open('file.txt', 'rt', encoding='utf8')
        s = f.read()
        print(s)

    处理二进制文件， 使用struct处理二进制
        import struct
        f = open('demo.wav', 'rb')  # b 2进制
        info = f.read(44)   #读44字节
        a = struct.unpack('i', info[24:28])
        ------------------------------------------
        第一，使用'r'的时候如果碰到'0x1A'，就会视为文件结束，这就是EOF。使用'rb'则不存在这个问题。即，如果你用二进制写入再用文本读出的话，如果其中存在'0X1A'，就只会读出文件的一部分。使用'rb'的时候会一直读到文件末尾。
        第二，对于字符串x='abc\ndef'，我们可用len(x)得到它的长度为7，\n我们称之为换行符，实际上是'0X0A'。
            当我们用'w'即文本方式写的时候，在windows平台上会自动将'0X0A'变成两个字符'0X0D'，'0X0A'，即文件长度实际上变成8.。当用'r'文本方式读取时，又自动的转换成原来的换行符。
            如果换成'wb'二进制方式来写的话，则会保持一个字符不变，读取时也是原样读取。所以如果用文本方式写入，用二进制方式读取的话，就要考虑这多出的一个字节了。'0X0D'又称回车符。
            linux下不会变。因为linux只使用'0X0A'来表示换行。
        -------------------------------------------

        struct模块中最重要的三个函数是pack(), unpack(), calcsize()
        pack(fmt, v1, v2, ...)     按照给定的格式(fmt)，把数据封装成字符串(实际上是类似于c结构体的字节流)
        unpack(fmt, string)       按照给定的格式(fmt)解析字节流string，返回解析出来的tuple
        calcsize(fmt)                 计算给定的格式(fmt)占用多少字节的内存
  
        struct中支持的格式如下表：
        Format	C Type	        Python	字节数
            x	pad byte	    no value	1
            c	char	        string of length 1	1
            b	signed char	    integer	    1
            B	unsigned char	integer	    1
            ?	_Bool	        bool	    1
            h	short	        integer	    2
            H	unsigned short	integer	    2
            i	int	            integer	    4
            I	unsigned int	integer or long	4
            l	long	        integer	    4
            L	unsigned long	long	    4
            q	long long	    long	    8
            Q	unsigned long long	long	8
            f	float	        float	    4
            d	double          float	    8
            s	char[]	        string	    1
            p	char[]	        string	    1
            P	void *	        long
            注1.q和Q只在机器支持64位操作时有意思
            注2.每个格式前可以有一个数字，表示个数
            注3.s格式表示一定长度的字符串，4s表示长度为4的字符串，但是p表示的是pascal字符串
            注4.P用来转换一个指针，其长度和机器字长相关
            注5.最后一个可以用来表示指针类型的，占4个字节
            

