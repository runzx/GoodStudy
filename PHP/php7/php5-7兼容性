1. 关于间接使用变量、属性和方法的变化 ¶
    对变量、属性和方法的间接调用现在将严格遵循从左到右的顺序来解析，而不是之前的混杂着几个特殊案例的情况。 下面这张表说明了这个解析顺序的变化。
    间接调用的表达式的新旧解析顺序
    表达式	                PHP5的解析方式	            PHP7的解析方式
    $$foo['bar']['baz']	    ${$foo['bar']['baz']}	($$foo)['bar']['baz']
    $foo->$bar['baz']	    $foo->{$bar['baz']}	    ($foo->$bar)['baz']
    $foo->$bar['baz']()	    $foo->{$bar['baz']}()	($foo->$bar)['baz']()
    Foo::$bar['baz']()	    Foo::{$bar['baz']}()	(Foo::$bar)['baz']()
    使用了旧的从右到左的解析顺序的代码必须被重写，明确的使用圆括号来表明顺序（参见上表）。 
        这样使得代码既保持了与PHP 7.x的前向兼容性，又保持了与PHP 5.x的后向兼容性。
