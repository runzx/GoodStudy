
1. 全局执行
    在全局作用域中它的 this 执行当前的全局对象（浏览器端是 Window，node 中是 global）。

2. 函数中执行
    1）一个函数被直接调用的时候，属于全局调用，这时候它的 this 指向 全局对象；
    2）严格模式 ‘use strict’;
        如果在严格模式的情况下执行纯粹的函数调用，那么这里的的 this 并不会指向全局，
            而是 undefined，这样的做法是为了消除 js 中一些不严谨的行为：
3. 作为对象的方法调用
    被当作一个对象的方法调用的时候：this 指向当前的这个对象；

4. 作为一个构造函数使用
    在调用一个构造函数的时候需要加上 new 这个关键字：
    function Person(name) {
        this.name = name;
        console.log(this);
    }
    var p = new Person('qiutc');    // Person {name: "qiutc"}
    this 指向了这个构造函数调用时候实例化出来的对象；
5. 箭头函数
    函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
    箭头函数中的 this 在定义它的时候已经决定了（执行定义它的作用域中的 this），与如何调用以及在哪里调用它无关，
        包括 (call, apply, bind) 等操作都无法改变它的 this。
6. call, apply, bind
    在 js 中，函数也是对象，同样也有一些方法，这里我们介绍三个方法，
        他们可以更改函数中的 this 指向：
    fun.call(thisArg[, arg1[, arg2[, ...]]])
        它会立即执行函数，第一个参数是指定执行函数中 this 的上下文，
        后面的参数是执行函数需要传入的参数；
    fun.apply(thisArg[, [arg1, arg2, ...]])
        它会立即执行函数，第一个参数是指定执行函数中 this 的上下文，
        第二个参数是一个数组，是传给执行函数的参数（与 call 的区别）；
    var foo = fun.bind(thisArg[, arg1[, arg2[, ...]]]);
        它不会执行函数，而是返回一个新的函数，这个新的函数被指定了 this 的上下文，
        后面的参数是执行函数需要传入的参数；

