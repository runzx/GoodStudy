//	nginx 正则表达式匹配入门篇

1、nginx配置基础
	1、正则表达式匹配
		~ 		区分大小写匹配
		~* 		不区分大小写匹配
		!~和!~*	分别为区分大小写不匹配及不区分大小写不匹配
		^ 		以什么开头的匹配
		$ 		以什么结尾的匹配
		\		转义字符,可以转. * ?等
		* 		前面的子表达式0次或多次
		+		前面的子表达式1次或多次
		?		匹配前面的子表达式0次或一次
		|		指明两项之间的一个选择
	2、文件及目录匹配
		-f和!-f用来判断是否存在文件
		-d和!-d用来判断是否存在目录
		-e和!-e用来判断是否存在文件或目录
		-x和!-x用来判断文件是否可执行
	例:
		location = /	#匹配任何查询，因为所有请求都已 / 开头。但是正则表达式规则和长的块规则将被优先和查询匹配
		location ^~ /images/ {	# 匹配任何已/images/开头的任何查询并且停止搜索。任何正则表达式将不会被测试。
		location ~* .(gif|jpg|jpeg)$ {	# 匹配任何已.gif、.jpg 或 .jpeg 结尾的请求

2. location 匹配的优先级(与location在配置文件中的顺序无关)
	(location =) > (location 完整路径) > (location ^~ 路径) > (location ~,~* 正则顺序) > (location 部分起始路径) > (/)

	= 精确匹配会第一个被处理。如果发现精确匹配，nginx停止搜索其他匹配。
	普通字符匹配，正则表达式规则和长的块规则将被优先和查询匹配，也就是说如果该项匹配还需去看有没有正则表达式匹配和更长的匹配。
	^~ 则只匹配该规则，nginx停止搜索其他匹配，否则nginx会继续处理其他location指令。
	最后匹配理带有"~"和"~*"的指令，如果找到相应的匹配，则nginx停止搜索其他匹配；当没有正则表达式或者没有正则表达式被匹配的情况下，那么匹配程度最高的逐字匹配指令会被使用。
	例:
	location  = / {
	  # 只匹配"/".
	  [ configuration A ]
	}
	location  / {
	  # 匹配任何请求，因为所有请求都是以"/"开始
	  # 但是更长字符匹配或者正则表达式匹配会优先匹配
	  [ configuration B ]
	}
	location ^~ /images/ {
	  # 匹配任何以 /images/ 开始的请求，并停止匹配 其它location
	  [ configuration C ]
	}
	location ~* \.(gif|jpg|jpeg)$ {
	  # 匹配以 gif, jpg, or jpeg结尾的请求.
	  # 但是所有 /images/ 目录的请求将由 [Configuration C]处理.
	  [ configuration D ]
	}

	.     匹配除换行符以外的任意字符
	\w     匹配字母或数字或下划线或汉字
	\s     匹配任意的空白符
	\d     匹配数字
	\b     匹配单词的开始或结束
	^     匹配字符串的开始
	$     匹配字符串的结束

	*     重复零次或更多次
	+     重复一次或更多次
	?     重复零次或一次
	{n}     重复n次
	{n,}     重复n次或更多次
	{n,m}     重复n到m次
	*?     重复任意次，但尽可能少重复
	+?     重复1次或更多次，但尽可能少重复
	??     重复0次或1次，但尽可能少重复
	{n,m}?     重复n到m次，但尽可能少重复
	{n,}?     重复n次以上，但尽可能少重复

	\W     匹配任意不是字母，数字，下划线，汉字的字符
	\S     匹配任意不是空白符的字符
	\D     匹配任意非数字的字符
	\B     匹配不是单词开头或结束的位置
	[^x]     匹配除了x以外的任意字符
	[^aeiou]     匹配除了aeiou这几个字母以外的任意字符

	捕获     (exp)     匹配exp,并捕获文本到自动命名的组里
	(?<name>exp)     匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)
	(?:exp)     匹配exp,不捕获匹配的文本，也不给此分组分配组号
	零宽断言     (?=exp)     匹配exp前面的位置
	(?<=exp)     匹配exp后面的位置
	(?!exp)     匹配后面跟的不是exp的位置
	(?<!exp)     匹配前面不是exp的位置
	注释     (?#comment)     这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读
