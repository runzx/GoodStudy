# Grunt / Gulp / Webpack / Rollup 比较

## Rollup 

1. 是下一代 ES6 模块化工具，它最大的亮点是利用 ES6 模块设计，生成更简洁、更简单的代码。尽可能高效地构建出能够直接被其它 JavaScript 库引用的模块
2. 基于权衡，Rollup 目前还不支持代码拆分（Code Splitting）和模块的热更新（HMR）
3. 一般而言，对于应用使用 Webpack，对于类库使用 Rollup；需要代码拆分(Code Splitting)，或者很多静态资源需要处理，再或者构建的项目需要引入很多 CommonJS 模块的依赖时，使用 webpack。代码库是基于 ES6 模块，而且希望代码能够被其他人直接使用，使用 Rollup
4. Rollup 与 Webpack 有这不同的用途，因此会共同存在，并相互支持
React 已经将构建工具从 Webpack 换成了 Rollup

## Parcel

1. 以 assets 方式组织的，assets 可以是任意文件，所以你可以构建任意文件。
2. 而在 webpack 中，只有 JS 是一等公民（webpack@4 会增加 CSS 为一等公民），所以必须是以 JS 为入口去组织其他文件，这很别扭。
3. ParcelJS 本身是 0 配置的，但 HTML、JS 和 CSS 分别是通过 posthtml、babel 和 postcss 处理的，所以我们得分别配 .posthtmlrc、.babelrc 和 .postcssrc。

## Grunt 

1. 是一套前端自动化工具，帮助处理反复重复的任务。
2. 一般用于： 编译，压缩，合并文件，简单语法检查等

## Gulp 

1. 是基于“流”的自动化构建工具，采用代码优于配置的策略，更易于学习和使用

## Webpack 

1. 是模块化管理工具和打包工具。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、AMD 模块、ES6 模块、CSS、图片等。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载
2. Webpack定位是模块打包器，而 Gulp/Grunt 属于构建工具。Webpack 可以代替 Gulp/Grunt 的一些功能，但不是一个职能的工具，可以配合使用
2. 从最初的require.js模块加载库以及相关规范出现开始，社区就开始进行各种尝试。到gulp利用pipe以及watch概念来构建前端自动化流程，之后引入了browserify打包作为构建工具中的一环，最终到了现在webpack集大成者。webpack当年首先是作为一款与browserify功能相当的打包工具/库，出现在社区中的。
3. webpack推出了一系列的功能，渐渐发觉，gulp能做的事情，现在webpack都能做到了，甚至还多了一系列的gulp配合打包库才能做到的功能。
4. webpack 以 js为入口，parceljs以html为入口，这方面我更赞成webpack，因为 js 运用范围越来越广。
