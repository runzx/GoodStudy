TP5 Queue ： think-queue
    https://github.com/top-think/think-queue

2. 安装
    composer require topthink/think-queue
    配置
        配置文件位于 application/extra/queue.php
            公共配置
            return [
                'connector'  => 'Redis',		// Redis 驱动
                'expire'     => 60,				// 任务的过期时间，默认为60秒; 若要禁用，则设置为 null 
                'default'    => 'default',		// 默认的队列名称
                'host'       => '127.0.0.1',	// redis 主机ip
                'port'       => 6379,			// redis 端口
                'password'   => '',				// redis 密码
                'select'     => 0,				// 使用哪一个 db，默认为 db0
                'timeout'    => 0,				// redis连接的超时时间
                'persistent' => false,          // 长联接 
            ];		
            驱动配置
            各个驱动的具体可用配置项在think\queue\connector目录下各个驱动类里的options属性中，写在上面的queue配置里即可覆盖


3. 发布任务
        think\Queue::push($job, $data = '', $queue = null)
            立即执行
        think\Queue::later($delay, $job, $data = '', $queue = null) s
            在$delay秒后执行

4. 监听任务并执行
    php think queue:listen
         父进程 + 子进程 的处理模式
         listen所在的父进程正常情况会一直运行，除非遇到下面两种情况：
            1)创建的某个work子进程的执行时间超过了 listen命令行中的--timeout 参数配置，此时work子进程会被强制结束，listen所在的父进程也会抛出一个 ProcessTimeoutException 异常并退出。开发者可以选择捕获该异常，让父进程继续执行，也可以选择通过 supervisor 等监控软件重启一个新的listen命令。
            2)listen 命令所在的父进程因某种原因存在内存泄露，则当父进程本身占用的内存超过了命令行中的 --memory 参数配置时，父子进程均会退出。正常情况下，listen进程本身占用的内存是稳定不变的。
        处理完一个任务之后新开一个work进程，此时会重新加载框架脚本。
        可以限制其创建的work子进程的超时时间。
        listen命令的适用场景是：
            任务数量较少
            任务的执行时间较长(如生成大型的excel报表等)，
            任务的执行时间需要有严格限制

    php think queue:work --daemon（不加--daemon为执行单个任务）
        单进程的处理模式
        work 模式本质上既不能控制进程自身的运行时间，也无法限制执行中的任务的执行时间。
        脚本内部做循环，框架脚本在命令执行的初期就已加载完毕；
        work 模式的性能会比listen模式高。
        php think queue:work \
            --daemon            //是否循环执行，如果不加该参数，则该命令处理完下一个消息就退出
            --queue  helloJobQueue  //要处理的队列的名称
            --delay  0 \        //如果本次任务执行抛出异常且任务未被删除时，设置其下次执行前延迟多少秒,默认为0
            --force  \          //系统处于维护状态时是否仍然处理任务，并未找到相关说明
            --memory 128 \      //该进程允许使用的内存上限，以 M 为单位
            --sleep  3 \        //如果队列中无任务，则sleep多少秒后重新检查(work+daemon模式)或者退出(listen或非daemon模式)
            --tries  2          //如果任务已经超过尝试次数上限，则触发‘任务尝试次数超限’事件，默认为0
        work 命令的适用场景是：
            任务数量较多
            性能要求较高
            任务的执行时间较短
            消费者类中不存在死循环，sleep() ，exit() ,die() 等容易导致bug的逻辑
    具体的可选参数可以输入命令加 --help 查看
    可配合supervisor使用，保证进程常驻
5. 内容：
    1）Redis 中，每一个 队列 都三个key 与之对应 ，以 helloJobQueue 队列举例，其在redis 中的保存方式为：
        key名	                        类型	                说明
        queues:helloJobQueue	        List ， 列表	       待执行的任务列表
        queues:helloJobQueue:delayed	Sorted Set，有序集合	 延迟执行和定时执行的任务集合
        queues:helloJobQueue:reserved	Sorted Set，有序集合	 执行中的任务集合
        使用的:分隔符, 只是用来表示相关key的关联性。本身没有特殊含义。
    2）在有序集合中，每个元素代表一个任务，该元素的 Score 为该任务的入队时间戳，任务的 value 为json 格式， 
        [
            'job'  => 'application\\index\\job\\Hello' ,  // jobHandlerClassName，消费者类的类名 
            'data' => [					            // 生产者传入的业务数据
                'time' => '2017-02-18 16:20:10',
                'data' => 'I have 648 apples'
            ],
            'id'   => '77IasdasadIasdadadadKL8t',	// 一个随机的32位字符串
            'attempts' => 2				            // 任务的已尝试次数
        ]
6. debug
    1) job里的fire() 会转到job/Redis.php里的fire()
    2) mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )
        
        call_user_func — 把第一个参数作为回调函数调用
            callback    将被调用的回调函数（callable）。
            parameter   0个或以上的参数，被传入回调函数。
        调用类内部的方法比较奇怪，居然用的是array
            call_user_func(array($classname, 'say_hello'));
    3) 
        除了 Queue::push( $jobHandlerClassName , $jobData , $jobQueueName );
             $jobHandlerClassName  = 'command\TestJob';  
             $jobHandlerClassName 是任务名
                单模块的，且命名空间是app\job的，比如上面的例子一,写Job1类名即可
                多模块的，且命名空间是app\module\job的，写model/Job1即可
                其他的需要些完整的类名，比如上面的例子二，需要写完整的类名app\lib\job\Job2
                如果一个任务类里有多个小任务的话，如上面的例子二，需要用@+方法名app\lib\job\Job2@task1、app\lib\job\Job2@task2
        Queue::push( $jobHandlerObject ,null , $jobQueueName ); 这时，需要在 $jobHandlerObject 中定义一个 handle() 方法，
            $jobHandlerClassName  = new TestJob();
                 "{\"job\":\"think\\\\queue\\\\CallQueuedHandler@call\",\"data\":。。。。
            消息队列在执行到该任务时会自动反序列化该对象，并调用其 handle()方法。 该方式的缺点是无法传入自定义数据。
    4）blpop
        blpop(array $keys, $timeout)    返回数据 [0]key值 [1]同下面 @return  array array('listName', 'element')
        lpop(string $key)               返回 字符串'element'
    5) 阻塞 60秒后失效
        set_exception_handler(exceptionhandler); 函数设置用户定义的异常处理函数。
            PHP 7.0.0：传递到 exception_handler 中的参数类型从 Exception 更改为 Throwable。
            PHP 5.5：之前，如果传递 NULL，该函数返回 TRUE。从 PHP 5.5 起返回之前的处理程序。
        work->runNextJobForDaemon() catch! 这儿捕获到异常：
            RedisException: read error on connection in /mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/queue/connector/Redis.php on line 81

            Call Stack:
                0.0151     349408   1. {main}() /mnt/d/phpStudy/WWW/mmb/think:0
                0.4246     351376   2. require('/mnt/d/phpStudy/WWW/mmb/thinkphp/console.php') /mnt/d/phpStudy/WWW/mmb/think:17
                0.5517    1216696   3. think\Console::init(???) /mnt/d/phpStudy/WWW/mmb/thinkphp/console.php:20
                0.5709    1634568   4. think\Console->run() /mnt/d/phpStudy/WWW/mmb/thinkphp/library/think/Console.php:84
                0.5761    1923616   5. think\Console->doRun(???, ???) /mnt/d/phpStudy/WWW/mmb/thinkphp/library/think/Console.php:125
                0.5764    1923616   6. think\Console->doRunCommand(???, ???, ???) /mnt/d/phpStudy/WWW/mmb/thinkphp/library/think/Console.php:187
                0.5764    1923616   7. think\queue\command\Work->run(???, ???) /mnt/d/phpStudy/WWW/mmb/thinkphp/library/think/Console.php:562
                0.5775    1938608   8. think\queue\command\Work->execute(???, ???) /mnt/d/phpStudy/WWW/mmb/thinkphp/library/think/console/Command.php:175
                4.3641    1941264   9. think\queue\command\Work->daemon(???, ???, ???, ???, ???) /mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/queue/command/Work.php:72
                4.3683    2022360  10. think\queue\command\Work->runNextJobForDaemon(???, ???, ???, ???) /mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/queue/command/Work.php:109
                4.3683    2022360  11. think\queue\Worker->pop(???, ???, ???, ???) /mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/queue/command/Work.php:136
                5.2600    2022360  12. think\queue\Worker->getNextJob(???) /mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/queue/Worker.php:32
                5.2613    2027216  13. think\Queue::pop() /mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/queue/Worker.php:53
                5.2613    2027272  14. think\Queue::__callStatic(???, ???) /mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/queue/Worker.php:53
                5.2654    2102800  15. call_user_func_array:{/mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/Queue.php:47}(???, ???) /mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/Queue.php:47
                5.2655    2102864  16. think\queue\connector\Redis->pop(???) /mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/Queue.php:47
                7.6482    2111528  17. Redis->blPop(???, ???) /mnt/d/phpStudy/WWW/mmb/vendor/topthink/think-queue/src/queue/connector/Redis.php:81
        查看 error log，发现：’RedisException’ with message ‘read error on connection’ 提示。
        因为PHP的超时！
            在程序中动态配置：
                ini_set('default_socket_timeout', -1);
            或在php.ini中（修改这， 不推荐）
                default_socket_timeout= 60  // 默认60秒！
    6） 长连接
        使用 pconnect 的时候执行 close 或者 php 脚本请求结束后并不会关闭连接.
            需要注意其实这里有个容易误解的地方: 手动 close 之后并不是不关闭当前连接,而是连接池不释放而已.
            connect 在使用的时候会建立一个连接 脚本结束后 或者 使用 close 会销毁连接.
            close 并不会销毁 resource … = = 只是断开连接而已… unset 变量才会销毁…
            所以并不是使用了 pconnect 就不要 close 了,如果当前脚本执行时间很长 辣么会一直占用一个连接的.详情请看鸟哥blog
