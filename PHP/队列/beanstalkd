
    协议，类 Memcached 协议, 非二进制安全
    全内存, 可开启 binlog, 断电从 binlog 恢复数据
    单线程, 使用 epoll/kqueue 来实现事件机制
2) 几个概念

tube - 消息通道，类似于 kafka 里面的 topic, 用来存储某一类或者业务的任务
job - 生产和消费的基本单元，每个 job 都会有一个 id 和 优先级


4. job状态
    ready
    delayed 延迟
    buried  预留
    reserved    保留的
    delete

//------------------- 状态图来自官方文档 -------------------//

   put with delay               release with delay
  ----------------> [DELAYED] <------------.
                        |                   |
                 kick   | (time passes)     |
                        |                   |
   put                  v     reserve       |       delete
  -----------------> [READY] ---------> [RESERVED] --------> *poof*
                       ^  ^                |  |
                       |   \  release      |  |
                       |    `-------------'   |
                       |                      |
                       | kick                 |
                       |                      |
                       |       bury           |
                    [BURIED] <---------------'
                       |
                       |  delete
                        `--------> *poof*

与php-resque 对比
    1、php-resque不区分明显的客户端和服务端，beanstalkd区分，较符合我们常用的思维方式。 
    2、php-resque只需安装redis并运行，而beanstalkd是自己写的服务端与其他软件无关，也不需要。 
    3、php-resque不能持久化，而beanstalkd可以，但实际不用为好，因为太慢。 
    4、php-resque和beanstalkd都很轻量级，都很容易使用。 
    5、最重要的php-resque不能使用延时队列（或者说需要其他组件补充），而beanstalkd可以。 
    6、php-resque许久不更新了，而beanstalkd在composer上次更新是2015年，好不少。 
    7、php-resque没有优先级，而beanstalkd有优先级，但我也不用。 
    8、为了防止某个consumer长时间占用任务但不能处理的情况，Beanstalkd为reserve操作设置了timeout时间，如果该consumer不能在指定时间内完成job，job将被迁移回READY状态，供其他consumer执行。 

    客户端可以选用多种语言，php也有多个类库，但composer仓库下载最多的是pda/pheanstalk 

服务端说明： 
    1、一个消息有READY, RESERVED, DELAYED, BURIED四种状态 
    2、当producer直接put一个消息时，消息就处于READY状态 
    3、如果选择延迟put，消息就先到DELAYED状态，等待时间过后才迁移到READY状态。任务状态会从 READY 变为 RESERVED(预定)，其他人就无法获取。 PUT 产生消息的时候，携带了 ttr(time to run)，如果这个时间内，消费者没有发送 delete, release 或者 buried 命令。 任务会自动回到 READY 状态，其他人可以继续获取。（注意：消费者返回 release 命令或者不返回，就回到 READY/DELAYED 状态，可以重新被消费！！这可能是我们不希望的） 
    4、如果获取了当前READY的消息后，该消息的状态就迁移到RESERVED，这样其他的任何进程就不能再操作该消息。确保唯一使用。 
    5、BURIED这个，为防止一个消息被调用多次，可以使用此接口。 
    6、程序有一个delete操作，一个消息被delete之后，就完全消失，不属于上面的4种情况中任何一种，并且，一般来说，就应该在获取消息之后对其delete，绝对不可以省略。 

Beanstalkd的job状态多样化，支持任务优先级 (priority), 延时 (delay), 超时重发 (time-to-run) 和预留 (buried), 能够很好的支持分布式的后台任务和定时任务处理。 

它的内部实现采用 libevent, 服务器-客户端之间用类似 memcached 的轻量级通讯协议，因此有很高的性能。 

关于服务端使用的内存，只取决于队列大小，不限制。 
缺点：无最大内存控制, 如果有消息堆积或者业务使用方式有误，而导致内存暴涨拖垮机器 

 tube 结构里面有哪些东西:

struct tube {
    uint refs;          // tube 当前被引用的次数                        
    char name[MAX_TUBE_NAME_LEN]; // tube 名称, 最长 200byte
    Heap ready;         // 保存就绪队列的最小堆                        
    Heap delay;         // 保存延时队列的最小堆                       
    struct ms waiting;  // 正在使用 tube 的连接    
    struct stats stat;  // tube 对应的统计项
    uint using_ct;      // tube using 使用次数   
    uint watching_ct;   // 被watch的次数
    int64 pause;        // tube 是否整个被延时  
    int64 deadline_at;  // tube 延时截止时间 
    struct job buried;  // buried 队列
};