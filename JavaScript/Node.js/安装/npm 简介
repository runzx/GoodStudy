
npm 模块安装机制简介

1. 一个模块不管是否安装过，npm 都要强制重新安装，可以使用-f或--force参数。
    npm update <packageName>
        它会先到远程仓库查询最新版本，然后查询本地版本。如果本地版本不存在，或者远程版本较新，就会安装。

2. 缓存目录
    npm install或npm update命令，从 registry 下载压缩包之后，都存放在本地的缓存目录。
        在 Linux 或 Mac 默认是用户主目录下的.npm目录，
        在 Windows 默认是%AppData%/npm-cache
    
    每个模块的每个版本，都有一个自己的
        子目录：
            代码的压缩包package.tgz文件
            描述文件package/package.json。
    不是很关键的操作（比如npm search或npm view），npm会先查看.cache.json里面的模块最近更新时间，跟当前时间的差距，是不是在可接受的范围之内。如果是的，就不再向远程仓库发出请求，而是直接返回.cache.json的数据。
    清空：
        npm cache clean
3. 模块的安装过程
    发出npm install命令
    npm 向 registry 查询模块压缩包的网址
    下载压缩包，存放在~/.npm目录
    解压压缩包到当前项目的node_modules目录
    --cache-min参数指定一个时间（单位为分钟），只有超过这个时间的模块，才会从 registry 下载。
        npm install --cache-min 9999999 <package-name>
        npm install --cache-min Infinity <package-name>

4. 命令
    init -y或-f      // 跳过提问阶段，直接生成一个新的package.json文件。
    npm info <>     //查看模块信息
    npm search      //搜索npm仓库，它后面可以跟字符串，也可以跟正则表达式。
    npm list        //global参数，会列出全局安装的模块。

    npm run
        命令会自动在环境变量$PATH添加node_modules/.bin目录，所以scripts字段里面调用命令时不用加上路径，这就避免了全局安装NPM模块。
        执行脚本。package.json文件有一个scripts字段，可以用于指定脚本命令，供npm直接调用。
        npm test等同于执行npm run test，npm start等同于执行npm run start。
        npm run会创建一个Shell，执行指定的命令，并临时将node_modules/.bin加入PATH变量，这意味着本地模块可以直接运行。
        
    npm install
    npm i
        -g  全局安装只适用于工具模块
        npm install git://github.com/package/path.git#0.1.0
        sax@">=0.1.0 <0.2.0"
        --save-exact参数，会在package.json文件指定安装模块的确切版本。
        指定所安装的模块属于哪一种性质的依赖关系
            –save：模块名将被添加到dependencies，可以简化为参数-S。
            –save-dev: 模块名将被添加到devDependencies，可以简化为参数-D 
        安装beta版本的模块
    
    npm update  
        -S或--save参数，可以在安装的时候更新package.json里面模块的版本号。
        只更新顶层模块，而不更新依赖的依赖
            npm --depth 9999 update

5. package.json 中的常见字段
    name：
        包名，这个名字决定了包在 node_modules 中的文件夹名，可以加上 scope，比如 @att/wxx，scope 为 att，用户安装的时候会被安装在 node_modules/@att/ 这个文件夹下。
    main：
        该模块的入口文件，比如 "main": "build/index.js"，别人在 require 这个包的时候，实际是 require 了项目中的 build/index.js 这个文件。
    bin：
        用来指定可执行文件的名称和路径，
            { "bin" : { "wxx-cli" : "src/cli.js" } }，这样用户在安装该模块的时候，
                npm 创建wxx-cli 放置在 node_modules/.bin 文件下，并将其
                链接至 src/cli.js 这个文件上。关于此，后面还会详细讲解。
        由于node_modules/.bin/目录会在运行时加入系统的PATH变量，因此在运行npm时，就可以不带路径，直接通过命令来调用这些脚本。
        所有node_modules/.bin/目录下的命令，都可以用npm run [命令]的格式运行。
        在命令行下，键入npm run，然后按tab键，就会显示所有可以使用的命令。
    scripts：
        用来指定一些脚本，也就是人们通常所说的 npm script，这个字段是一个对象，在这里可以自定义多个命令，这些命令可以使用 npm run 来执行，比如：
        {
            "scripts":{
                "build": "webpack",
                "start": "webpack-dev-server"
            }
        }
        有了上面这样的配置，在项目中执行 npm run build 就会执行命令 webpack，npm script 涉及的东西较多，后面有专门的一章来讲它。
    dependencies 和 devDependencies
        package.json 中的 dependencies 和 devDependencies 分别记录了该项目在生产环境下依赖的模块，和在开发环境下依赖的模块。
        比如一个项目使用了 typescript 来开发，在发布的时候通常要将代码编译为 JavaScript，因此在开发的时候使用的 typescript 就应该放在 devDependencies，所以在安装的时候，可以使用 npm i typescript --save-dev 来安装。
        另外项目代码中依赖了一个模块 qs 来解析 url，为了让你的代码跑起来，这个模块必须存在，因此，必须将该模块记录在 dependencies 中，使用 npm i qs --save 来进行安装。这样用户在运行你的代码的时候，你代码中的 require('qs') 才不至于找不到模块报错。
6. 模块的版本
    版本号应该形如 1.0.0
        修改 bug，打补丁，应该修改最后一位，比如 1.0.1
        新的特性，且不会影响现存的特性，比较小的修改，增加中间一位，比如 1.1.0
        大的修改，对现有功能有影响，增加第一位，比如 2.0.0
    安装某个模块的时候，也会一并安装该模块依赖的模块（存在于 dependencies 中的模块）
        接受微小的升级，bug 修复：1.0 或者 1.0.x 或者 ~1.0.4，这表示在安装的时候接受最后一位的变化。
        接受较小的升级，新增特性：1 或者 1.x 或者 ^1.0.4，这表示接受中间位置的变化
        接受重大升级：* 或者 x
    卸载模块, npm uninstall 
        --save 和 --save-dev 从 package.json 中删除该模块。