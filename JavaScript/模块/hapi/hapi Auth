


1. server.auth.scheme(name, scheme)
    注册身份验证方案
    scheme: function(server, options)
        server
        options 可选，在实例化策略时传递给server.auth.strategy（）的方案选项参数。
            必须返回  authentication scheme object
            api - (optional) object 通过server.auth.api对象暴露的对象
            async authenticate(request, h) - (required) a lifecycle method 
                必返回下面之一
                h.authenticated()       //成功，通过
                h.unauthenticated()     //失败
            async payload(request, h) - (optional)
            async response(request, h) - (optional)
            options - (optional) 
                payload - if true,
2 server.auth.strategy(name, scheme, [options])
    注册身份验证策略，其中：
        name - 策略名称。
        scheme- 方案名称（必须事先使用 server.auth.scheme()注册）。
        options - 基于方案要求的方案选项。
3. server.auth.default(options)
    默认strategy 为每一个路由
    options strgegy name
    authentication configuration object 
    例：
        。。。
        server.auth.scheme('custom', scheme);
        server.auth.strategy('default', 'custom');
        server.auth.default('default');

        server.route({
            method: 'GET',
            path: '/',
            handler: function (request, h) {

                return request.auth.credentials.user;
            }
        });

v16
4. server.route(options)
    options :
        path
        method
        vhost
        handler
        config :
            app
            auth :
                false    to disable authentication if a default strategy is set.
                string name of authentication strategy registered with server.auth.strategy().
                an object with:
                    mode
                        'required'  没有凭据handler不执行401，错误凭据不执行  401
                        'optional'  没有凭据handler执行200，错误凭据不执行  401 
                        'try'       没有凭据handler执行200，错误凭据执行    200
                    strategies // 单个字符串用 strategy
                    payload
                        false
                        'required'
                        'optional
                    access
                        scope : ['+user', '!admin', 'a', 'b']      // '+' required, '!' forbidden 表示不能有admin,必须是user,且 a和b要有一个成立
                                // 可以访问请求对象（query和params）上的属性，以便通过使用{}属性名称周围的字符来填充动态范围，
                                // 例如'user-{params.id}'。默认为false（没有范围要求）。
                        entity
                            any 
                            user
                            app
            bind
            cache
            compression
            cors 
            ext
            fies
            handrler
            id
            isInternal
            json
            jsonp
            log
            payload

