
JS几种数组遍历方式以及性能分析对比

1. 普通for循环
    for(j = 0; j < arr.length; j++) { }             //24ms

2. 优化版for循环
    for(j = 0,len=arr.length; j < len; j++) { }     //23ms
3. 弱化版for循环
    for(j = 0; arr[j]!=null; j++) { }               //175ms
        这种方法的性能要远远小于普通for循环
4. foreach循环
    arr.forEach(function(e){ });                    //209ms
5. forin循环
    for(j in arr) { }                               //4858ms
6. map遍历
    arr.map(function(n){ }                          //1265ms
7. forof遍历(需要ES6支持)
    for(let value of arr) { }                       //485ms
        性能要好于forin，但仍然比不上普通for循环
        与forEach()不同的是，它可以正确响应break、continue和return语句
        for-of循环也支持字符串遍历，它将字符串视为一系列的Unicode字符来进行遍历：
        它同样支持Map和Set对象遍历。
        for-of循环不支持普通对象
            for (var key of Object.keys(someObject)) {
                console.log(key + ": " + someObject[key]);
            }

8. 
    ES5 引入了Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）
        所有可遍历（ enumerable ）属性的键名。
    Object.values 方法返回一个数组，成员是参数对象自身的（不含继承的）
        所有可遍历（ enumerable ）属性的键值。
    Object.entries方法返回一个数组，成员是参数对象自身的（不含继承的）
        所有可遍历（ enumerable ）属性的键值对数组。
            [ ["foo", "bar"], ["baz", 42] ]  