
1。 内嵌embedded 优于 引用 reference link

2。 集合的大小是什么样的规模？你需要意识到一对很少，一对许多，一对非常多，这些细微的区别。不同的情况下你的建模也将不同。
  一对很少 Basics: Modeling One-to-Few
    个人需要保存多个地址
  一对许多 Basics: One-to-Many
    每个商品有数百个可替换的零件，但是不会超过数千个。
    这个用例很适合使用间接引用—将零件的objectid作为数组存放在商品文档中
  一对非常多 Basics: One-to-Squillions
    收集各种机器日志的例子
  
  一对很少且不需要单独访问内嵌内容的情况下可以使用内嵌多的一方。
  一对多且多的一端内容因为各种理由需要单独存在的情况下可以通过数组的方式引用多的一方的。
  一对非常多的情况下，请将一的那端引用嵌入进多的一端对象中。

3. 嵌入型文档允许一个文档中保存多条相关信息应用程序可以执行更少的查询和更新操作.
  以下情况使用嵌入型文档:
    1.实体间有"包含"的关系
    2.实体间有一对多的关系.在这种关系中,
      多的一方总是在一的一方作为上下文或者作为父文档的时候出现.
  嵌入型文档读操作性能较好,单一数据库的时候检索数据快.
    update相关数据的操作是原子性的.
  与嵌入型文档进行交互,需要使用"."操作符来访问嵌入型文档
  文档必须小于BSON文档的最大值限制(普通时为16M)
4。不要嵌套太深
  不要嵌套太深，否则读取更新删除起来会很复杂,最多一两层
  业务类型的字段不要内嵌到基本实体中,而是使用关联

5。 如果MySQL没有经过查询优化的话，其查询速度就不要跟MongoDB比了。
  ，MongoDB数据库更适合那些读作业较重的任务模型
  带”_id”插入数据的时候，MongoDB的插入效率其实并不高。如果想充分利用MongoDB性能的话，
    推荐采取不带”_id”的插入方式，然后对相关字段作索引来查询。