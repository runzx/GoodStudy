Policy对象提供以下方法：
1. get(id, callback)
    id - 唯一的物品标识符（在策略段中）。可以是具有所需'id'键的字符串或对象。
        例：  
            let id = request.params.a + ':' + request.params.b;
            { id: id, a: request.params.a, b: request.params.b }
    callback - 返回功能。函数签名是function(err, value, cached, report)：
        cached- null如果在缓存中找不到有效的项目，或者包含以下项的对象：
            item- 缓存value。
            stored - 项目存储在缓存中时的时间戳。
            ttl - 记录的缓存ttl值。
            isStale- true如果物品陈旧。
        report - 具有关于包含以下键的生成操作的日志记录信息的对象（相关）：
            msec - 以毫秒为单位的缓存查找时间。
            stored - 项目存储在缓存中时的时间戳。
            isStale- true如果物品陈旧。
            ttl - 记录的缓存ttl值。
            error - 查找错误。

2. new Policy(options, [cache, segment])位置构造：
    options - 是具有以下可选键的对象（除非另有说明）：
        expiresIn - 相对过期，以项目保存在缓存中后的毫秒数表示。
        generateFunc- 如果在调用时没有在缓存中找到缓存项，则使用该函数生成新的缓存项get()。该方法的签名是
        function(id, next)：
            id      - id提供给get()方法的字符串或对象。
            next    - 在签名返回新项目时调用的方法
                function(err, value, ttl)，其中：
                    err     - 错误情况。
                    value   - 生成的新值。
                    ttl     - 以毫秒为单位的缓存ttl值。设置为0跳过缓存中的存储。默认为缓存全局策略。
        generateTimeout- 在generateFunc函数花费太长时间返回一个值时返回超时错误之前要等待的毫秒数。
            当最终返回值时，它将存储在缓存中以备将来的请求使用。
            如果generateFunc存在，则需要。
            设置为false禁用可能导致所有get()请求永久停止的超时。
