
1. 对象拷贝
    object.assign({t:1}, {k:2})
2. 默认参数
    function hello(text='hello,zx'){

    }
    //ES5:
    function hello(text){
        text = text || 'hello,zx'
    }
3. 字符串模版
    var name = 'zx'
    var txt = `hello, ${name}`

    //ES5:
    var compiled = _.template('hello: <%= name =%>'); //'_'表示引用库
    compiled({name：'zx'});
4. 解构赋值
    左右两边相应结构对应赋值
    {
        let a,b
        [a,b] = [1,2]
    }
    {
        let a,b,rest;
        [a,b,...rest] = [1,2,3,4,5,6];
    }   //rest =[3,4,5,6]
    {
        let a,b;
        ({a,b} = {a:1,b:2})
    }
    使用场景：
    {
        let a = 1;
        let b = 2;
        [a,b] = [b,a];  //变量交换
    }
    {
        function f(){
            return [1,2]
        }
        let a,b;
        [a,b] = f();    //
    }
    {
        function f(){
            return [1,2,3,4,5]
        }
        let a,b,c
        [a,,,b] = f()   // a=1 b=4
    }
    {
        function f(){
            return [1,2,3,4,5]
        }
        let a,b,c
        [a,,...b] = f()   // a=1 b=[3,4,5], 适用于不确定返回数量 
    }
    //对象的
    {
        let o = {p:43,q:true}
        let {p,q}=o
    }
    {
        let metaData = {
            title:'abc',
            test:[{
                title:'test',
                desc:'description'
            }]
        }
        let {title:esTitle,test:[{title:cnTitle}]} = metaData
        console.log(esTitle,cnTitle)
    }
    //给新的变量名赋值， 可以从一个对象中提取变量并赋值给和对象属性名不同的新的变量名。
        var o = {p: 42, q: true};
        var {p: foo, q: bar} = o;
        
        console.log(foo); // 42 
        console.log(bar); // true

    

5. 箭头函数

6. Set Map

7. 异步操作

8. 类与对象
    class Abc extends Aaa{
        constructor(){
            super()     //用这时一定要放第一行！
        }

        get longName(){ //longName是属性，不是方法！
            return 'km'+this.name 
        }

        set longName(value){    //给longName赋值的内部执行
            this.name=value
        }

        static tell(){

        }       //静态方法调用： Abc.tell();
    }
    静态属性，在代码中直接定义：
        Abc.tell = 'hello';
    静态 要用类名称调用，不能用实例名（这是对象）

9. let
    块作用域：用{}包括的代码是一个块
    let， 不能重复定义一个变量

    const 常量，不能修改。也有块作用域，
        定义（声名）时必须赋值！
        对象是可以变的（对象的指针不变）


10. ES6强制严格模式
    ES5 : "use strict";
    严格模式：变量要先定义

11. 10个ES6最佳特性，排名不分先后：
    函数参数默认值
    模板字符串
    多行字符串
        多行字符串放在反引号``之间就好了：
            var roadPoem = `Then took the other, as just as fair,
                And having perhaps the better claim
                Because it was grassy and wanted wear,
                Though as for that the passing there
                Had worn them really about the same,`
    解构赋值
        var { house, mouse} = $('body').data()
        var [col1, col2]  = $('.column')；
    对象属性简写
        var baz = { bar, foo };     // ES5:  baz = { bar:bar, foo:foo };
    箭头函数
    Promise
    Let与Const
    类
    模块化