

1. 更安全的数据库
    3.x 版本默认WriteConcern 为{w：1}，2.x版本为 {w: 0}
    3.x 默认使用更安全的 SCRAM-SHA-1 算法鉴权，代替了2.x 版本默认的 MONGODB-CR
    3.x 支持加密引擎对存储的数据进行加密

2. 更高的服务性能
    版本	    MMAPV1	    WIREDTIGER
    2.x	    DB级别锁	    不支持
    3.x	    集合级别锁	  文档级别锁

3. 更低的存储成本
    版本	MMAPV1	        WIREDTIGER
    2.x	不支持数据压缩	    不支持
    3.x	不支持数据压缩	    支持snappy、zlib等压缩
        wiredtiger默认使用snappy压缩，存储成本通常只有mmapv1的10%-30%左右。
4. 更快的复制
    3.x 在增量同步数据时，拉取oplog和重放oplog完全流水线化，效率更高
    3.4 对全量同步做了改进
    在拷贝数据的时候，同时建立所有的索引（以前版本只有_id索引是在同步数据时建立的）
    拷贝数据的阶段，secondary 不断拉取新的 oplog，同步效率更高，同时避免了出现oplog不足无法同步的问题。
5. 更简单、高效的分片集群
    MongoDB 3.2 开始，分片集群的Config Server 也是一个复制集，之前的版本则是多个独立的mongod节点，维护起来更简单。
    MongoDB 3.4 开始，分片集群的迁移由Config server负责，并支持同时发起迁移任务，迁移效率更高。
    3.x 版本里还增加了其他一些很给力的功能特性，比如

    部分索引，可以让索引占用的空间更小
    文档校验，灵活的文档模型下
    Collation，支持本地化语言排序
    只读视图，让复杂的查询写起来的更简单
    更强大的aggregation支持

6. 版本使用建议 （2016-12-23版）
    3.2	强烈建议使用
    3.4	鼓励使用

7. MongoDB 3.6 Authentication IP Restrictions
    clientSource 就是针对客户端的IP 做白名单控制。
    serverAddress 就是针对服务端的IP 做白名单控制。
        服务端的IP 指的是客户端在连接过来的时候指定的host 地址，比如：mongo --host=192.168.56.101，那么serverAddress 就必须包含192.168.56.101
    默认3.6 开启了bind_ip=localhost，而由于一开始忽略了这个问题，折腾了我好久。重启数据库加上--bind_ip_all

8. 历史

    历史 2007年10月，MongoDB由10gen团队所发展。2009年2月首度推出。
    2012年05月23日，MongoDB2.1 开发分支发布了! 该版本采用全新架构，包含诸多增强。
    2012年06月06日，MongoDB 2.0.6 发布，分布式文档数据库。
    2013年04月23日，MongoDB 2.4.3 发布，此版本包括了一些性能优化，功能增强以及bug修复。
    2013年08月20日，MongoDB 2.4.6 发布，是目前最新的稳定版。
    2017 11月 3.6

    RockMongo — 最好的PHP语言的MongoDB管理工具，轻量级, 支持多国语言.

    另外一个就是在一定的时间后，所占空间会莫明其妙地增大，所以要定期把数据库做修复，定期重新做索引，这样会提升MongoDB的稳定性和效率。

9. 与mysql比较
    对比事务安全，MongoDB更关注高的插入速度。如果你需要加载大量低价值的业务数据，那么MongoDB将很适合你的用例。但是必须避免在要求高事务安全的情景下使用MongoDB，比如一个1000万美元的交易。
    如果你没有专业的DBA，同时你也不需要结构化你的数据及做join查询，MongoDB将会是你的首选
    事务关系支持薄弱。这也是所有NoSQL数据库共同的缺陷

    MongoDB的应用场景
        1）、表结构不明确且数据不断变大
        MongoDB是非结构化文档数据库，扩展字段很容易且不会影响原有数据。内容管理或者博客平台等，例如圈子系统，存储用户评论之类的。
        2）、更高的写入负载
        MongoDB侧重高数据写入的性能，而非事务安全，适合业务系统中有大量“低价值”数据的场景。本身存的就是json格式数据。例如做日志系统。
        3）、数据量很大或者将来会变得很大
        Mysql单表数据量达到5-10G时会出现明细的性能降级，需要做数据的水平和垂直拆分、库的拆分完成扩展，MongoDB内建了sharding、很多数据分片的特性，容易水平扩展，比较好的适应大数据量增长的需求。
        4）、高可用性
        自带高可用，自动主从切换（副本集）

    不适用的场景
        1）、MongoDB不支持事务操作，需要用到事务的应用建议不用MongoDB。
        2）、MongoDB目前不支持join操作，需要复杂查询的应用也不建议使用MongoDB。
