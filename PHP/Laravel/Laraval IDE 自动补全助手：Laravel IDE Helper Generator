Laraval IDE 自动补全助手：Laravel IDE Helper Generator 
            http://laravelacademy.org/post/4202.html
1、简介
    该扩展包可以生成一个IDE可以理解的文件，以便提供精准的自动补全功能。这个生成的文件基于项目中存在的文件，所以永远是实时的。当然如果你不想手动生成这个文件，也可以使用预生成的文件并把它们放到项目根目录下（这些文件就没有那么实时了）：
        Larval 5：https://gist.github.com/barryvdh/5227822
        Lumen：https://gist.github.com/barryvdh/be17164b0ad51f832f20
        PHPStorm Meta 文件：https://gist.github.com/barryvdh/bb6ffc5d11e0a75dba67
2、安装
    我们使用如下Composer命令安装扩展包相关依赖：
        composer require barryvdh/laravel-ide-helper
    安装完成后我们需要到config/app.php的providers选项中注册服务提供者：
        Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider::class,
    安装后就会在根目录下自动生成一个vendor文件夹，该文件夹存放各种依赖包。
3、自动生成Laravel门面对应的phpDoc
    在使用这个扩展包之前，或许不少人已经碰到了使用PHPStorm不能自动补全门面（Facade）的问题，现在Laravel IDE Helper Generator 为我们带来了福音。我们使用如下命令生成包含门面补全信息的文件：
        php artisan ide-helper:generate
    注意：在此之前需要清除bootstrap/compiled.php，所以生成之前需要先运行php artisan clear-compiled然后运行php artisan optimize。
    为了后续方便，你也可以在composer.json文件中作如下配置：
        "scripts":{
            "post-update-cmd": [
                "php artisan clear-compiled",
                "php artisan ide-helper:generate",
                "php artisan optimize"
            ]
        },
    还可以发布配置文件以修改默认实现：
        php artisan vendor:publish --provider="Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider" --tag=config
    生成器会尝试定位真正的类，如果找不到，可以在配置文件中定义。
    有些类需要数据库连接，如果没有相应的数据库连接，某些门面可能无法包含进来。
        你可以选择要包含的辅助函数文件，默认该选项并未开启，但是你可以通过--helpers选项覆盖默认配置。
        默认会引入Illuminate/Support/helpers.php，当然你还可以在配置文件中添加自定义的辅助函数文件。
4、自动生成模型对应的phpDoc
    在使用本特性之前，需要先安装doctrine/dbal: ~2.3：
        composer require doctrine/dbal
    如果你不想自己编写模型属性，可以使用php artisan ide-helper:models命令来基于数据表字段、关联关系以及getters/setters生成对应的phpDoc。你可以通过—write（-W）选项来编写模型文件的注释，默认情况下，你需要覆盖或新建一个单独的文件_ide_helper_models.php，你也可以通过—nowrite（-N）不做更改。需要注意的是在进行操作之前需要备份模型文件，因为我们要保留之前已存在的，只是追加新属性和方法，而不是覆盖和重写。phpdoc已存在会被替换，否则新增，通过—reset（-R）选项，已存在的phpdoc会被忽略，新增的字段/关系才会被保存。
        php artisan ide-helper:models Post
    该命令会根目录下生成文件 _ide_helper_models.php。
5、PHPStorm中容器实例对应的Meta
    可以生成一个PHPStorm meta文件来添加工厂设计模式支持，对Laravel而言，这意味着我们可以让PHPStorm理解从IoC容器中取出的对象类型。例如，events会返回Illuminate\Events\Dispatcher对象，因此通过meta文件你可以调用app('events')然后它会自动补全对应的调度方法。
        php artisan ide-helper:meta
    会在根目录下生成 .phpstorm.meta.php文件。