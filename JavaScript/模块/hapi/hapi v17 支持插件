
以前接受回调（通过callback或next）的任何函数现在都会返回一个promise。
    除了具有reply()接口的方法外（请参阅下面的生命周期方法部分），
    所有其他方法保持不变，应该使用await关键字调用。

Updated dependencies
    accept v3.0.2
    ammo v3.0.0
    b64 v4.0.0
    boom v7.1.1
    big-time v2.0.0
    call v5.0.1
    catbox v10.0.2
    catbox-memory v3.1.1
    content v4.0.3
    cryptiles v4.1.0
    heavy v6.0.0
    hoek v5.0.2
    iron v5.0.4
    joi v13.0.1
    mime-db v1.31.0
    mimos v4.0.0
    nigel v3.0.0
    pez v4.0.1
    podium v3.1.2
    shot v4.0.3
    statehood v6.0.5
    subtext v6.0.7
    teamwork v3.0.1
    topo v3.0.0
    vise v3.0.0
    wreck v14.0.2

3. 搜索以下方法并将回调替换为await：
    server.auth.test()
    server.cache.provision()
    server.emit()
    server.initialize()
    server.inject()
    server.register()
    server.start()
    server.stop()
    Plugin register()
    The after argument of server.dependency()
    Server methods
    Custom validation functions
    Cache methods and the generateFunc option
    The autoValue option of server.state()
4. Lifecycle methods(生命周期方法）
    是一个使用签名的异步函数async function(request, h, [err])，几乎每一个传递给框架的方法在处理传入请求时都会使用它。
        handlers, request extensions, failAction methods, pre-handlers, and authentication scheme methods.
        这包括处理程序，请求扩展，failAction方法，预处理程序和身份验证方案方法。
    随着async/await推广，旧的reply()界面不再适用，因为它实际上是一个回调有很多特殊的处理规则。相反，新的生命周期方法是一个更简单的接口。要设置新的回复，只需返回该值。
        要设置新的响应并跳转到响应验证，请使用takeover()响应修饰器。
        要继续执行而不设置响应，返回h.continue。它在API文档中列出的选项的完整列表。
        例：
        // Before
        const handler = function (request, reply) {
            return reply('ok');
        };

        // After
        const handler = function (request, h) {
            return 'ok';
        };
5. Plugins
    替换 exports.register()
        用 exports.register.attributes with exports.plugin = { register, name, version, multiple, dependencies, once, pkg }
    
    V17定义 ：
    await server.register(plugins, [options])
        plugins ： 一个或一个数组:
            a plugin object.
            options -       (optional) 在注册期间传递给插件的选项。options passed to the plugin during registration.
            once, routes -  (optional) 如下定义的特定于插件的注册选项。plugin-specific registration options as defined below.
        options - (optional) registration options (different from the options passed to the registration function):
            once -  如果true，同一个插件的后续注册被跳过没有错误。不能与插件选项一起使用。
                默认为false。如果没有设置true，则在服务器上第二次注册插件时将会抛出错误。
            routes  应用于插件添加的每个路由的修饰符：
                prefix  将字符串作为前缀添加到任何路径路径， must begin with '/'
                vhost   应用于每个路由的虚拟主机字符串（或字符串数​​组）。最外层vhost覆盖任何嵌套的配置。
    例：
        async function example() {
            await server.register({ 
                plugin: require('plugin_name'), 
                options: { 
                    message: 'hello' 
                } 
            });
        }  

    // register plugins, wrapped in async/await
    async function liftOff () {  
        await server.register({
            plugin: require('vision')
        })

        server.views(…)
    }
    liftOff()

    // 或者：

    // register plugins using a promise
    server.register({  
        plugin: require('vision')
    }).then(
        () => { server.views(…) 
    })
    
    // or 
    const register = async (server, options) => {
        // Do your registration stuff
    };
    const plugin = {
        register,
        name: 'pluginName',
        version: '1.0.1'
    };
    try {
        await server.register(plugin);
    }
    catch (err) {
        console.log('Deal with your registration error');
    }