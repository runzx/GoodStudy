
1. Request 对象内容：
    app     - 特定于应用程序的状态。提供一个安全的地方来存储应用程序数据，而不会与框架发生冲突。不应该被使用的插件使用 plugins[name]。
    auth    - 认证信息：
        isAuthenticated - true如果请求已被成功验证，否则 false。
        credentials     - credential在认证过程中收到的对象。对象的存在并不意味着成功的身份验证。
        artifacts       - 从身份验证策略接收到的用于身份验证相关操作的工件对象。
        mode            - 路由认证模式。
        error           - 认证错误失败，模式设置为'try'。
    connection - 请求被接收的连接。
    domain  - 节点域对象，用于防止扩展
    headers - 原始请求标题（引用request.raw.headers）。
    id      - 唯一的请求标识符（生成格式"{now}:{connection.info.id}:{5 digits counter}"）。
        "1517888795037:Dell-zhaix:16820:jdb3reux:10001"
    info    - 请求信息：
        acceptEncoding  - 请求首选编码。
        cors            - 如果路由启用了CORS，则包含以下内容：
        isOriginMatch   - true如果请求“Origin”标题符合配置的CORS限制。设置为false如果没有“产地”头被发现，或者如果它不匹配。请注意，这仅在'onRequest'扩展点之后才可用，因为每个路由都配置了CORS，并且在请求生命周期的这一点上没有做出路由决策。
        host            - HTTP'主机'标题的内容（例如'example.com:8080'）。
        hostname        - “主机”标题的主机名部分（例如'example.com'）。
        received        - 请求接收时间戳。
        referrer        - HTTP“引用者”（或“引用者”）头部的内容。
        remoteAddress   - 远程客户端IP地址。
        remotePort      - 远程客户端端口。
        responded       - 请求响应时间戳（0尚未响应）。
    method  - 小写的请求方法（例如'get'，'post'）。
    mime    - 解析的内容类型标题。仅在有效负载解析启用且没有发生有效负载错误时才可用。
    orig    -包含的值的对象params，query和payload之前进行的任何有效性修改。只在执行输入验证时设置。
*    params  -一个对象，其中每个键是路径参数名称具有如所描述的匹配值 的路径参数。
    paramsArray- 一个包含所有路径params值的数组，按它们在路径中出现的顺序排列。
*    path    - 请求URI的路径名组件。
*    payload - 基于路线payload.output和payload.parse设置的请求有效载荷。
    plugins - 插件特定的状态。提供一个地方来存储和传递请求级别的插件数据。这plugins是一个对象，其中每个键是一个插件名称，值是状态。
    pre     - 一个对象，其中每个键是由路由先决条件函数分配的名称 。这些值是作为参数提供给继续函数的原始值。对于包装的响应对象，请使用responses。
    response - 设置时的响应对象。该对象可以被修改，但不能被分配另一个对象。要用扩展点内的另一个替换响应 ，请使用reply(response)不同的响应覆盖。包含null未设置响应的时间（例如，当客户端断开连接时请求过早终止）。
    preResponses- 与prepre方法创建的响应对象相同。
*    query   - 默认情况下，从节点的URL parse（）方法输出的对象。也可以通过request.setUrl间接设置，在这种情况下，它可能是一个string（如果url设置为一个对象的query属性作为一个未分析的字符串）。
    raw     - 一个包含Node HTTP服务器对象的对象。不建议直接与这些原始对象进行交互。
        req     - node.js请求对象。
        res     - node.js响应对象。
    route   - 路由公共接口。
*    server  - 服务器对象。
    state   - 一个包含经过分析的HTTP状态信息（cookie）的对象，其中每个关键字都是cookie名称，值是使用任何注册的cookie定义进行处理后的匹配cookie内容。
    url     - 解析的请求URI。

Request lifecycle （生命周期） 学习


    onRequest

    Route lookup

    JSONP processing

    Cookies processing

    onPreAuth

    Authentication

    Payload processing

    Payload authentication

    onCredentials

    onPostAuth

    Headers validation

    Path parameters validation

    JSONP cleanup


Lifecycle methods

