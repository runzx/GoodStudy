M方法和D方法的区别
    ThinkPHP 中M方法和D方法都用于实例化一个模型类，M方法 用于高效实例化一个基础模型类，
        而 D方法 用于实例化一个用户定义模型类。

    使用M方法
    如果是如下情况，请考虑使用 M方法：
        对数据表进行简单的 CURD 操作而无复杂的业务逻辑时
        只有个别的表有较为复杂的业务逻辑时，将 M方法 与实例化 CommonModel 类进行结合使用
    M方法 甚至可以简单看着就是对参数表名对应的数据表的操作：
        $User = M('User');
        $User = new Model('User');  //等效

    使用D方法
    如果是如下情况，请考虑使用 D方法：
        需要使用 ThinkPHP 模型中一些高级功能如自动验证功能（create()方法中实现）、关联模型等
        业务逻辑比较复杂，且涉及的表众多
        将业务逻辑定义在了自定义的模型类里面（Lib/Model目录下），而想在操作中实现这些业务逻辑
    另外 D方法 不支持跨项目调用，需要使用：
        $User = D('User', 'Admin');    // 实例化 Admin 项目下面的 User 模型
        $User = D('Admin.User');        // 启用了项目分组

        $User = D('User');
        $User = new UserModel();    //等效
    这两个方法的区别在于M方法实例化模型无需用户为每个数据表定义模型类，如果D方法没有找到定义的模型类，则会自动调用M方法。


    启用了项目分组后，Model 类并不必然对应着项目分组。多个项目组之间共有的模型类，统一放在 Model 目录下，可以直接使用D('ModelName') 实例化。而 D('User.UserInfo') 并不表示 User 一定是一个项目分组，也可以仅仅是对 Model 下文件的一个分类目录，D('User.UserInfo') 实例化的是 User 目录下的 UserInfo 模型类。

    总结
    M方法 和 D方法 都可以在模型类文件不存在的情况下直接使用的，但显然 M方法 更高效；
    但要使用模型类里面业务逻辑，就必须使用 D方法。
    一个比较形象的比喻就是：M方法 就如一台刚装好操作系统的电脑，只能使用一些基本功能；而 D方法 就如在装好的系统上再安装了一些如 Office、QQ 等应用软件，功能更加强大，同时整个电脑运行速度也变慢了。
