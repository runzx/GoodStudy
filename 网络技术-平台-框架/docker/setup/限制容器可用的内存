限制容器可用的内存
 linux 主机来说，一旦内核检测到没有足够的内存可以分配，就会扔出 OOME(Out Of Memmory Exception)，并开始杀死一些进程用于释放内存空间。
    糟糕的是任何进程都可能成为内核猎杀的对象，包括 docker daemon 和其它一些重要的程序

docker run -it -m 300M --memory-swap -1 --name con1 u-stress /bin/bash
    -m 选项限制容器使用的内存上限为 300M。
    同时设置 memory-swap 值为 -1，它表示容器程序使用内存的受限，而可以使用的 swap 空间使用不受限制
    正常情况下， --memory-swap 的值包含容器可用内存和可用 swap。
        所以 --memory="300m" --memory-swap="1g" 的含义为：
            容器可以使用 300M 的物理内存，并且可以使用 700M(1G -300M) 的 swap
    格式是数字加单位，单位可以为 b,k,m,g。最小为 4M

–memory-reservation	内存的软性限制。格式同上
–oom-kill-disable	是否阻止 OOM killer 杀死容器，默认没设置
    设置–oom-kill-disable选项来禁止 OOM killer 杀死容器内进程。
    确保-m/–memory选项时才使用–oom-kill-disable禁用 OOM killer。
–oom-score-adj	容器被 OOM killer 杀死的优先级，范围是[-1000, 1000]，默认为 0
-memory-swappiness	用于设置容器的虚拟内存控制行为。值为 0~100 之间的整数
–kernel-memory	核心内存限制。格式同上，最小为 4M

docker 也是通过内核的 cgroups 来做容器的资源限制
    docker 为容器设置 CPU share 的参数是 -c --cpu-shares，它的值是一个整数
    1.13 版本之后，docker 提供了 --cpus 参数可以限定容器能使用的 CPU 核数
    --cpuset 参数让容器只运行在哪几个核上 --cpuset=1,3

    所有和容器 CPU share 有关的配置都在 /sys/fs/cgroup/cpu/docker/<docker_id>/ 目录下面，其中 cpu.shares 保存了 CPU share 的值

    目前 docker 支持对磁盘的读写速度进行限制
    --blkio-weight 参数可以设置 block 的权重，这个权重和 --cpu-shares 类似，
        它是一个相对值，取值范围是 10-1000，
        当多个 block 去屑磁盘的时候，其读写速度和权重成反比。