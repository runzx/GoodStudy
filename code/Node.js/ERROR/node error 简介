
1. 四类错误:
    标准的 JavaScript 错误：
        <EvalError>     : 当调用 eval() 失败时抛出。
        <SyntaxError>   : 当 JavaScript 语法错误时抛出。
        <RangeError>    : 当值不在预期范围内时抛出。
        <ReferenceError> : 当使用未定义的变量时抛出。
        <TypeError>     : 当传入错误类型的参数时抛出。
        <URIError>      : 当全局的 URI 处理函数被误用时抛出。
    由底层操作系触发的系统错误，例如试图打开一个不存在的文件、试图通过一个已关闭的 socket 发送数据等。
    由应用程序代码触发的用户自定义的错误。
    断言错误是错误的一个特殊类别，每当 Node.js 检测到一个不应该发生的异常逻辑时触发。 
        这类错误通常由 assert 模块引起。
    所有由 Node.js 引起的 JavaScript 错误与系统错误都继承自或实例化自标准的 JavaScript <Error> 类，且保证至少提供类中的属性

2. Node.js 支持几种当应用程序运行时发生的错误的冒泡和处理的机制。
    所有 JavaScript 错误都会被作为异常处理，异常会立即产生并使用标准的 JavaScript throw 机制抛出一个错误。 
        这些都是使用 JavaScript 语言提供的 try / catch 语句处理的。
    JavaScript 的 throw 机制的任何使用都会引起异常，异常必须使用 try / catch 处理，
        否则 Node.js 进程会立即退出。
    除了少数例外，同步的 API（任何不接受 callback 函数的阻塞方法，例如 fs.readFileSync）会使用 throw 报告错误

    大多数的异步方法都接受一个 callback 函数，该函数会接受一个 Error 对象传入作为第一个参数。

    当一个异步方法被一个 EventEmitter 对象调用时，错误会被分发到对象的 'error' 事件上
        connection.on('error', (err) => {...});
        对于所有的 EventEmitter 对象，如果没有提供一个 'error' 事件句柄，则错误会被抛出，并造成 Node.js 进程报告一个未处理的异常且随即崩溃，除非： 
            适当地使用 domain 模块或已经注册了一个 process.on('uncaughtException') 事件的句柄。

    JavaScript 的 try / catch 机制无法用于捕获由异步 API 引起的错误。
    大多数情况下，在回调内抛出一个错误会使 Node.js 进程崩溃。
        如果域已启用，或已在 process.on('uncaughtException') 注册了一个句柄，则这些错误可被捕获。
    
3. new Error(message)
    新建一个 Error 实例，并设置 error.message 属性以提供文本信息。 message 传的是一个对象，则会调用 message.toString() 生成文本信息
    error.stack 属性表示被调用的 new Error() 在代码中的位置。
    堆栈跟踪只会取（a）异步代码执行的开头或（b）Error.stackTraceLimit 属性给出的栈帧中的最小项。
    error.code 属性是标识错误类别的字符标签, 总是 E 带上一串大写字母。


0. 常见的系统错误#
    以下列表是不完整的，但列举了编写 Node.js 程序时会遇到的一些常见的系统错误。 详细的列表可从 ERRNO 文档找到。

    EACCES (拒绝访问): 试图以被一个文件的访问权限禁止的方式访问一个文件。

    EADDRINUSE (地址已被使用): 试图绑定一个服务器（net、http 或 https）到本地地址，但因另一个本地系统的服务器已占用了该地址而导致失败。

    ECONNREFUSED (连接被拒绝): 无法连接，因为目标机器积极拒绝。 这通常是因为试图连接到外部主机上的废弃的服务。

    ECONNRESET (连接被重置): 一个连接被强行关闭。 这通常是因为连接到远程 socket 超时或重启。 常发生于 http 和 net 模块。

    EEXIST (文件已存在): 一个操作的目标文件已存在，而要求目标不存在。

    EISDIR (是一个目录): 一个操作要求一个文件，但给定的路径是一个目录。

    EMFILE (系统打开了太多文件): 已达到系统文件描述符允许的最大数量，且描述符的请求不能被满足直到至少关闭其中一个。 当一次并行打开多个文件时会发生这个错误，尤其是在进程的文件描述限制数量较低的操作系统（如 macOS）。 要解决这个限制，可在运行 Node.js 进程的同一 shell 中运行 ulimit -n 2048。

    ENOENT (无此文件或目录): 通常是由 fs 操作引起的，表明指定的路径不存在，即给定的路径找不到文件或目录。

    ENOTDIR (不是一个目录): 给定的路径虽然存在，但不是一个目录。 通常是由 fs.readdir 引起的。

    ENOTEMPTY (目录非空): 一个操作的目标是一个非空的目录，而要求的是一个空目录。 通常是由 fs.unlink 引起的。

    EPERM (操作不被允许): 试图执行一个需要更高权限的操作。

    EPIPE (管道损坏): 写入一个管道、socket 或 FIFO 时没有进程读取数据。 常见于 net 和 http 层，表明远端要写入的流已被关闭。

    ETIMEDOUT (操作超时): 一个连接或发送的请求失败，因为连接方在一段时间后没有做出合适的响应。 常见于 http 或 net。 往往标志着 socket.end() 没有被正确地调用。