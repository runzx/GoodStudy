
1。 文档模型
    一个文档， 一个购物车
    动态模型可以支持车内不同商品分类描述
        在这里我们把商品的一些主要信息放到购物车里了，比如说 name,price, quantity，为什么？ 读一次所有信息都拿到了：价格、数量等等，不需要再去查另一张表。这是一种比较常见的优化手段，用冗余的方式来提供读取性能。

    水平扩展
        注意$push的用法。$push 类似于javascript的操作符，意思是往数组尾部增加一个元素。

    TTL索引自动删除过期数据
        可以建立在任意一个时间字段上，在建立索引的时候可以指定文档在过多少时间后会被自动清理掉。

2。统计一下在购物车内某个商品的总数
    MongoDB的聚合功能。聚合运算在MongoDB里面是对数据输入源进行一系列的运算。
        db.cart.aqqregate(
            {$match:{"items.itemid":8910}},
            {$unwind:"$items"},
            {$group:{
                "_id":"$items.itemid",
                "amount":{"$sum":"$items.quantity"}
            }}
        )
        $match: 在所有购物车中过滤掉其他商品，只选出id是8910的商品
        $unwind: 把items 数组展开，每个数组元素变成一个文档
        $group: 用聚合运算 $sum 把每一件商品的数量相加获得总和
3. 社交网络的例子
    对于关系描述，使用文档模型的内嵌数组特性
    1） 有可能超出一个文档最大16M的硬性限制； 
    2） MongoDB数组太大会严重影响性能。
    可以建立一个专门的集合来描述关注关系。
    关注数，我们在显示关注和粉丝数量的时候，不希望去跑一次count 查询再显示。因为count操作一般来说会比较占资源。
        通常的做法可以再用户对象里面加两个字段，
        一个是关注数一个是粉丝数。
        每次有人关注或者关注别人时候就更新一下。

4. 微博墙，或者微信朋友圈
    扇出读 或者是扇出写, 是基于社交网络的海量用户、海量数据的应用特征。这些大量的数据往往分布在各个分片服务器上。

5. 物联网的应用场景
    IOT数据量大，写入频繁
    以插入为主，更新少
    统计分析场景多

    可以使用一个叫做分桶的设计方式来进行几十倍的性能增长。具体来说就是把采集的数据按小时为一个桶，把每小时的数据聚合到一个文档里。
        每分钟的值用子文档的一个字段来表示。这样做的好处就是大量减少文档的数量，相应的索引数量也会减少，总体写入IO将会大幅度降低并得到性能提升。
        使用这种方式我们还可以把一些统计需要的数值，如每小时的平均值预先就作为一个字段存进去，需要的时候不用现场计算，只要从文档里读出来即可。
    