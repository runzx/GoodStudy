
语法
    new Map([iterable])
参数
    iterable
    Iterable 可以是一个数组或者其他 iterable 对象，其元素或为键值对，或为两个元素的数组。 
        每个键值对都会添加到新的 Map。null 会被当做 undefined。
描述
    一个Map对象以插入顺序迭代其元素 — 一个  for...of 循环为每次迭代返回一个[key，value]数组。

Objects 和 maps 的比较
    Object 和 Map类似的一点是,它们都允许你按键存取一个值,都可以删除键,还可以检测一个键是否绑定了值.因此,一直以来,我们都把对象当成Map来使用,不过,现在有了Map,下面的区别解释了为什么使用Map更好点.
        一个对象通常都有自己的原型,所以一个对象总有一个"prototype"键。不过，
            从 ES5 开始可以使用 map = Object.create(null)来创建一个没有原型的对象。
        一个对象的键只能是字符串或者 Symbols，但一个 Map 的键可以是任意值。
        你可以通过size属性很容易地得到一个Map的键值对个数，而对象的键值对个数只能手动确认。
        Map 实例只适合用于集合(collections)，你应当考虑修改你原来的代码——先前使用对象来处理集合的地方。

用法
    var arr = array.map((value, index) => {
        ...
    };
    参数，分别是数组的值和下标，数组中的所有元素依次经过该函数处理后返回的值将组成新的数组。

    数组的array.filter()和array.map()类似，也是以一个带有两个参数value和index的函数为参数。不同的是，该函数的返回值应该是一个布尔值，为真当前这个数组元素保留，为假表示当前这个元素淘汰。效果正如『过滤器（filter）』这个名字的意思。
    