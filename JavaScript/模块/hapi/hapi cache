server.cache(options)
在服务器缓存设施中提供一个缓存段，其中：

    options- catbox策略配置其中：
        expiresIn - 自项目被保存在缓存中以毫秒为单位表示的相对过期时间。
            不能与expiresAt一起使用。
        expiresAt - 使用“HH:MM”格式以24小时表示法表示的一天中的所有缓存记录到期。使用当地时间。不能与expiresIn一起使用。
        generateFunc- 一个函数，用于在调用时在高速缓存中找不到缓存项目get()。方法的签名是function(id, next)： - 提供给方法id的id字符串或对象get()。- next当新项目与签名一起返回时调用的方法 function(err, value, ttl)，其中： - err错误条件。- value生成的新值。- ttl以毫秒为单位的缓存ttl值。设置为0跳过缓存中的存储。默认为缓存全局策略。
        staleIn- 将存储在缓存中的项目标记为陈旧的毫秒数，并在generateFunc提供时尝试重新生成。必须小于expiresIn。
        staleTimeout - 在检查项目是否陈旧之前要等待的毫秒数。
        generateTimeout- 当generateFunc函数花费太长时间返回一个值时，在返回超时错误之前要等待的毫秒数 。当最终返回值时，它将被存储在缓存中以备将来的请求。如果generateFunc存在，则需要。设置为false禁用可能导致所有get()请求永久停止的超时。
        generateOnReadError- 如果false上游缓存读取错误将停止cache.get() 方法调用生成函数，而将传回缓存错误。默认为true。
        generateIgnoreWriteError- 如果false调用时上游缓存写入错误 cache.get()将返回生成的值。默认为true。
        dropOnError- 如果true错误或超时generateFunc导致陈旧值从缓存中被逐出。默认为true。
        pendingGenerateTimeout- generateFunc在给定的ID进行generateFunc呼叫时的毫秒数，在允许后续呼叫之前。默认为0（不会阻塞并发generateFunc呼叫staleTimeout）。
        cache- 配置的缓存名称server.cache。默认为默认缓存。
        segment - 字符串段名称，用于隔离缓存分区中的缓存项目。在插件中调用时，默认为“！name”，其中“name”是插件名称。在服务器方法中调用时，默认为“#name”，其中“name”是服务器方法名称。在外部调用插件时需要。
        shared- 如果true允许多个缓存条款共享相同的段。默认为 false。

 2. 例   
    const cache = server.cache({ segment: 'countries', expiresIn: 60 * 60 * 1000 });
    cache.set('norway', { capital: 'oslo' }, null, (err) => {

        cache.get('norway', (err, value, cached, log) => {

            // value === { capital: 'oslo' };
        });
    });

3. new Server([options])
    options - 可选配置：
        app- 以后可以通过访问的应用程序特定的配置 server.settings.app。请注意，server.settings.app用于存储静态配置值和server.app用于存储运行时状态的区别。默认为{}。
        cache - 设置服务器端缓存。每个服务器都包含一个用于存储应用程序状态的默 
            默认情况下，将创建一个简单的基于内存的缓存，其容量和功能有限。
            hapi使用 catbox作为其缓存，其中包括对通用存储解决方案（如Redis，MongoDB，Memcached，Riak等）的支持。仅当方法和插件明确地将其状态存储在缓存中时才使用缓存。
            服务器缓存配置仅定义存储容器本身。cache可以分配：


    const Hapi = require('hapi');
    const server = new Hapi.Server({
        cache: require('catbox-redis'),
        load: {
            sampleInterval: 1000
        }
    });