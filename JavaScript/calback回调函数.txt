理解回调函数

函数是第一类对象，这是javascript中的一个重要的概念。意味着函数可以像对象一样按照第一类管理被使用，所以在javaScript中的函数：

    ?   能“存储”在变量中

    ?   能作为函数的实参被传递

    ?   能在函数中被创建

    ?   能从函数中返回    

回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。

异步回调：

	事件句柄回调
		$(document).ready(callback);
		$(document).on(‘click’,callback)

	Ajax异步请求成功失败回调
		$.ajax({
		  url: "aaron.html",
		  context: document
		}).done(function() { 
				//成功执行
		}).fail(function() {
				//失败执行
		);

同步回调：

	当然回调不仅仅只是处理异步，一般同步(很耗时的任务)的场景下也经常用到回调，比如要求执行某些操作后执行回调函数。

	一个同步(阻塞)中使用回调的例子，目的是在test1代码执行完成后执行回调callback
		var test1 = function(callback) {
			//执行长时间操作
			callback();
		}
		test1(function() {
			//执行回调中的方法
		});
		
所以理解回调函数最重要的2点：
	1、一个回调函数作为参数传递给另一个函数是，我们仅仅传递了函数定义。我们并没有在参数中执行函数。我们并不传递像我们平时执行函数一样带有一对执行小括号()的函数

	2、回调函数并不会马上被执行，它会在包含它的函数内的某个特定时间点被“回调”。