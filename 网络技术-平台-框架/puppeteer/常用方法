
1。  Page.exposeFunction，
    这个 API 用来在页面注册全局函数，非常有用：

2。 键盘和鼠标
    键盘和鼠标的API比较简单，键盘的几个API如下：
        keyboard.down(key[, options]) 触发 keydown 事件
        keyboard.press(key[, options]) 按下某个键，key 表示键的名称，比如 ‘ArrowLeft’ 向左键，详细的键名映射请戳这里
        keyboard.sendCharacter(char) 输入一个字符
        keyboard.type(text, options) 输入一个字符串
        keyboard.up(key) 触发 keyup 事件
    鼠标操作：
        mouse.click(x, y, [options]) 移动鼠标指针到指定的位置，然后按下鼠标，这个其实 mouse.move 和 mouse.down 或 mouse.up 的快捷操作
        mouse.down([options]) 触发 mousedown 事件，options 可配置:
        options.button 按下了哪个键，可选值为[left, right, middle], 默认是 left, 表示鼠标左键
        options.clickCount 按下的次数，单击，双击或者其他次数
        delay 按键延时时间
        mouse.move(x, y, [options]) 移动鼠标到指定位置， options.steps 表示移动的步长
        mouse.up([options]) 触发 mouseup 事件

3。Page.waitFor 系列 API
    page.waitFor(selectorOrFunctionOrTimeout[, options[, …args]]) 下面三个的综合 API
        waitUntil :
        load    事件是最常用的一个事件，当页面完全加载后(包括所有图像、javascript文件、CSS文件等外部资源)，就会触发window上的load事件
        domcontentloaded 考虑在DOMContentLoaded事件发生时完成导航。
            当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，
            而无需等待样式表、图像和子框架的完成加载。
            DOMContentLoaded 事件必须等待其所属script之前的样式表加载解析完成才会触发。
        networkidle0    当网络连接数不超过0且至少为500ms 时，请考虑完成导航。
            则是全部request结束
        networkidle2    当网络连接数不超过2 500ms 时，请考虑完成导航。
            代表还有两个以下的request就考虑navigation结束
    page.waitForFunction(pageFunction[, options[, …args]]) 
        等待 pageFunction 执行完成之后
    page.waitForNavigation(options) 
        等待页面基本元素加载完之后，比如同步的 HTML, CSS, JS 等代码
    page.waitForSelector(selector[, options]) 
        等待某个选择器的元素加载之后，这个元素可以是异步加载的，这个 API 非常有用，你懂的。
