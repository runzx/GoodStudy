
MongoDB设计命名规范

1。 库
  1. 库名全部小写，禁止使用任何`_`以外的特殊字符，禁止使用数字打头的库名，如：`123_abc`；
  2. 库以文件夹的形式存在，使用特殊字符或其它不规范的命名方式会导致命名混乱；
  3. 数据库名最多为64字符；
  4. 在创建新的库前应尽量评估该库的体积、QPS等，提前与DBA讨论是应该新建一个库还是专门为该库创建一个新的集群;
2。 集合
  1. 集合名全部小写，禁止使用任何`_`以外的特殊字符，
      禁止使用数字打头的集合名，如：`123_abc`，
      禁止system打头; system是系统集合前缀；
  2. 集合名称最多为64字符；
  3. 一个库中写入较大的集合会影响其它集合的读写性能，如果业务比较繁华的集合在一个DB中，
    建议最多80个集合，同时也要考虑磁盘I/O的性能；
  4. 如果评估单集合数据量较大，可以将一个大表拆分为多个小表，
    然后将每一个小表存放在独立的库中或者sharding分表；
  5. MongoDB的集合拥有“自动清理过期数据”的功能，只需在该集合中文档的时间字段
    增加一个TTL索引即可实现该功能，但需要注意的是该字段的类型则必须是mongoDate()，一定要结合实际业务设计是否需要；
  6. 设计轮询集合---集合是否设计为Capped限制集，一定要结合实际业务设计是否需要；
  7. 创建集合规则
    a. 如果是读多写少的表在创建时我们可以尽量将 page size 设置的比较小，比如 16KB，如果表数据量不太大(
      "internal_page_max=16KB，leaf_page_max=16KB，leaf_value_max=8KB，os_cache_max=1GB"
    b. 如果这个读多写少的表数据量比较大，可以为其设置一个压缩算法，例如：
      "block_compressor=zlib，internal_page_max=16KB，leaf_page_max=16KB，leaf_value_max=8KB"
    c. 注意：该zlib压缩算法不要使用，对cpu消耗特别大，如果使用snapp消耗20% cpu，而且使用zlib能消耗90%cpu，甚至100%
    d. 如果是写多读少的表，可以将 leaf_page_max 设置到 1MB，并开启压缩算法，也可以为其制定操作系统层面 page cache 大小的os_cache_max 值，让它不会占用太多的 page cache 内存，防止影响读操作；
3. 文档
  1. 文档中的key禁止使用任何`_`以外的特殊字符；
  2. 尽量将同样类型的文档存放在一个集合中，将不同类型的文档分散在不同的集合中；相同类型的文档能够大幅度提高索引利用率，如果文档混杂存放则可能会出现查询经常需要全表扫描的情况；

  3. 禁止使用_id，如：向_id中写入自定义内容；
    某业务的MongoDB在放量后出现严重的写入性能问题,大致为:写入达到300/s的时候IO跑满,排查中发现,该业务在设计的时候为了方便, 而将_id中写入了无序的类似md5的数据。MongoDB的表与InnoDB相似,都是索引组织表,数据内容跟在主键后,而_id是MongoDB中的默认主键,一旦_id的值为非自增,当数据量达到一定程度之后,每一次写入都可能导致主键的二叉树大幅度调整,这将是一个代价极大的写入, 所以写入就会随着数据量的增大而下降,所以一定不要在_id中写入自定义的内容。
  4. 尽量不要让数组字段成为查询条件
  5. 如果字段较大，应尽量压缩存放
  6. 由于MongoDB是大小写敏感的，如果字段无需大小写敏感，为了提高查询效率应尽量存放统一了大小写后的数据，如：全部小写或为该字段增加一个统一了大小写的辅助字段；

4. 索引
  1. MongoDB 的组合索引使用策略与 MySQL 一致，遵循“最左原则”;
  2. 索引名称长度不要超过128字符;
  3. 应尽量综合评估查询场景,通过评估尽可能的将单列索引并入组合索引以降低所以数量，结合1，2点;
  4. 在创建组合索引的时候，应评估索引中包含的字段，尽量将数据基数大(唯一值多的数据)的字段放在组合索引的前面；
5.       在数据量较大的时候，MongoDB 索引的创建是一个缓慢的过程
6.       MongoDB 支持 TTL 索引，该索引能够按你的需要自动删除XXX秒之前的数据并会尽量选择在业务低峰期执行删除操作；看业务是否需要这一类型索引；
7.       如果你存放的数据是地理位置信息，比如：经纬度数据。那么可以在该字段上添加 MongoDB 支持的地理索引：2d 及2dsphere，但他们是不同的，混用会导致结果不准确；
8.       MongoDB 的全文索引目前仍然处于“实验”阶段，性能并不够理想，当前不建议使用；
9.       从 MongoDB2.4开始，支持索引的 ICP 功能，可以通过其合理减少索引数量；
10.   创建索引要在后台创建，避免阻塞业务正常DML和查询
11.   创建索引建议：先做等值查询，在做排序，在做范围查询。
