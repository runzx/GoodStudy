
0. 转换
    // 转日期字符串为时间戳(ms)
    let myDate = new Date('2018-05-06T14:02:44.000Z');  // UTC
    ms = myDate.getTime();    //or ms=date.valueOf();返回指定时间距离1970年1月1日0时0分0秒的毫秒

        new Date();
        new Date("month dd,yyyy hh:mm:ss");
        new Date("month dd,yyyy");
        new Date("yyyy/MM/dd hh:mm:ss");
        new Date("yyyy/MM/dd");
        new Date("YYYY-MM-DDTHH:mm:ss.sssZ");//ISO 8601 扩展格式 “YYYY-MM-DDTHH:mm:ss.sssZ”，支持ECMAScript5才能支持此格式
        new Date(yyyy,mth,dd,hh,mm,ss);
        new Date(yyyy,mth,dd);
        new Date(ms);
    Date.parse() 方法解析一个表示某个日期的字符串，并返回从1970-1-1 00:00:00 UTC 到该日期对象（该日期对象的UTC时间）的毫秒数
        Date.parse('2016/11/12');
        Date.parse('2016/11/12 12:00:09');
        Date.parse('12/11/2016');
        Date.parse("Aug 9, 1995");
        Date.parse("Wed, 09 Aug 1995 00:00:00 GMT");
        Date.parse("Wed, 09 Aug 1995 00:00:00");
        Date.parse('2016-11-12T12:00:09');
1. ISO 日期格式
    ISO 格式是 ISO 8601 扩展格式的简化形式。  格式如下所示：  
    YYYY-MM-DDTHH:mm:ss.sssZ
        ISO 日期格式在 Internet Explorer 8 标准模式和 Quirks 模式中不受支持。
    
    符号        描述                值
    -, :, ., T  字符串中的实际字符。   T 指定某个时间的开始。  
    YYYY        年份。  可使用扩展的年份来代替 4 位数年份。  有关详细信息，请参阅本主题后面的 扩展的年份。  
    MM          月份                01 到 12
    DD          一个月中的某一天    01 到 31
    HH          小时                00 到 24
    mm          分钟                00 到 59
    ss          秒。  如果指定了时间，则秒和毫秒是可选项。  00 到 59
    sss         毫秒                00 到 999
    Z           此位置的值可以是下列值之一。  如果省略此值，则使用 UTC 时间。  
                Z 指示 UTC 时间。
                +hh:mm 指示输入时间是 UTC 时间后的指定偏移量。
                -hh:mm 指示输入时间是 UTC 时间前的指定偏移量的绝对值。

    字符串只能包含以下格式的日期：YYYY、YYYY-MM、YYYY-MM-DD。
    ISO 格式不支持时区名称。  
        可使用 Z 位置来指定相对于 UTC 时间的偏移量。  
        如果未在 Z 位置包括一个值，则使用 UTC 时间。
        可使用 00:00 或前一天的 24:00 指定午夜。  
            以下两个字符串指定同一时间：2010-05-25T00:00 和 2010-05-24T24:00。  

2. 其他日期格式
    短日期
        该格式必须遵循月/日/年顺序，如“06/08/2010”。
        “/”或“-”可用作分隔符。
    长日期
        年、月和日可按任何顺序排列。“  June 8 2010”和“2010 June 8”均有效。  
        年份可具有 2 位或 4 位数。  如果年份只有 2 位数，则它必须至少为 70。  
        月和日的名称必须至少具有两个字符。  两个字符所组成的非唯一名称将解析为最后一个匹配名称。  
            例如，“Ju”表示 7 月而不是 6 月。  
        如果一周中的某天与所提供日期的其余部分不一致，则忽略该天。  
            例如，“Tuesday November 9 1996”解析为“Friday November 9 1996”，因为 Friday 是与该日期对应的正确周日期。  
    时间
        小时、分钟和秒用冒号分隔开。  但可省略某些部分。  
            以下各项均有效：“10:”、“10:11”和“10:11:12”。  
        如果指定 PM 且指定的小时至少为 13，则返回 NaN。  
            例如，“23:15 PM”返回 NaN。  
    常规
        包含无效日期的字符串将返回 NaN。
        括号中的文本被视为注释。
        逗号和空格被视为分隔符。
        JavaScript 支持所有标准时区、协调通用时间 (UTC) 和格林尼治标准时间 (GMT)。  
            （ISO 格式不支持时区。）  
