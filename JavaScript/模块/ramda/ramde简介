
Ramda 的数据一律放在最后一个参数，理念是"function first，data last"。

1. Ramda 还有一个特点：所有方法都支持柯里化。
    // 写法二
    R.map(square)([4, 8])
    // 或者
    var mapSquare = R.map(square);
    mapSquare([4, 8]);

    使得 Ramda 成为 JavaScript 函数式编程最理想的工具库。

2. 
    函数的合成
        compose：将多个函数合并成一个函数，从右到左执行。
        pipe：将多个函数合并成一个函数，从左到右执行。
    curry：将多参数的函数，转换成单参数的形式。
    map：数组的每个成员依次执行某个函数。
