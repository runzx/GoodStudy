使用基于编辑器的Rest Client

0. Scratches.http （划痕？）
    PhpStorm提供了一个临时编辑器。您可以创建一个文本或一段代码用于搜索或探索的目的。
    支持PhpStorm代码编辑器中的HTTP文件包括以下内容(Scratches.http))：
        代码突出显示。
        方法类型和头字段的代码完成。
        查看 HTTP请求的结构。
        请求消息正文中的语言注入。
        移动重构，允许将请求移动到不同的文件。
    Scratches（这是PHPstorm自带的临时文件类型， 不存储在项目中）
        在开发过程中使用Scratches或Scratches文件。暂存文件不存储在项目中，所以PhpStorm可以修改它并添加有关请求的其他信息。
        如果从临时文件执行请求，则将响应输出文件的链接添加到此请求的下方以及请求历史记录文件的顶部。
        Scratches被存储，取决于您的操作系统，
            在PhpStorm home目录下 config/scratches （在Windows / * NIX上）
                ~ Library->Preferences-><PhpStorm>XX->scratches（在macOS上）
    如果自定义文件（xxx.http , 此文件奖成为项目的一员）
        物理文件用于记录，测试和验证HTTP请求。物理文件存储在您的项目，PhpStorm将不会修改它。
        如果从一个物理文件执行一个请求，这个文件将不会被修改。通过链接到响应输出文件的关于执行请求的信息将被添加到请求历史记录文件的顶部。
    HTTP请求的结构遵循以下一般模式：
        Method Request-URI HTTP-Version
        Header-field: Header-value

        Request-Body
1. 创建和编辑相应的HTTP请求文件（使用.rest或.http扩展名）来处理HTTP请求，这些文件现在受PhpStorm支持。如果您之前使用过Web API，那么HTTP格式的语法就会感觉很普通和自然。它通常遵循RFC标准，但包含了一些适合您的开发人员需求的调整。
    现在，它支持消息类型（GET，POST等），请求方案（http，https），HTTP请求版本（HTTP / 1.1），头名称，内容类型和编码。
        例： http://api.zx.com/api/v2/banner/1    
        只要您完成请求，您可以立即运行它，方法是单击左侧行号栏中的“运行”图标或使用Alt + Enter 调用“ 运行请求意向”操作：
        请求的详细执行结果显示在“ 运行”工具窗口中：
        在编辑器中的原始请求之后，您现在将看到指向响应输出的链接，在我们的例子中这是一个JSON文件。
            响应实际上被保存到一个文件中，所以我们可以使用Jump来源（或者Ctrl+单击）在一个新的编辑器选项卡中打开它。
            如果再次运行请求，则会显示第二个响应的链接。如果你想比较这些回应怎么办？
                只需单击装订图标或使用“ 比较意图”操作即可在“ 差异”查看器中打开文件。

    试试另一个例子。没有必要为此创建一个新文件：只需使用“###”作为请求之间的分隔符。
        ###
        POST http://api.zx.com/api/v1/fy
        Content-Type:application/json
        //默认， 可不设
        charset=utf-8

        //文件头设置和下面的数据要用空行隔开！
        {
            "deviceNo": "4600408123456789",
            "printTime": "2017-08-01 10:03:04",
            "msgNo":"some-thirdparty-id",
            "securityCode": "bed7f55aa24a7d92844cb304220954c5"
        }
    只需单击编辑器右上角的“ 显示HTTP请求历史记录”按钮（或使用“ 工具”菜单命令具有相同的名称）即可。在HTTP的请求日志文件将打开，显示出您的50个最近运行的请求和响应，并允许你重新运行它们中的任何：
        http-request-log.http

    # or //       备注comments 
    < test.json   通过文件输入数据
    可以通过缩进除字符串的第一行之外的所有内容来将长查询字符串分成几行。

        Content-Type: application/x-www-form-urlencoded
        Authorization: Basic 1234567890abcedf
    支持环境变量
        http://{{host}}/api/v1/banner/1
        rest-client.env.json 保存， 如
            {
                "dev":{
                    "host":"test-dev.zx.com"
                },
                "prod":{
                    "host":"api.zx.com"
                }
            }

    您可以使用multipart/form-data 内容类型执行请求。要发送文件作为multipart / form-data消息的一部分，请filename在Content-Disposition 头中包含参数。
        使用环境变量，您可以参数化HTTP请求的某些部分。
        POST http://example.com/api/upload HTTP/1.1
        Content-Type: multipart/form-data; boundary=boundary

        --boundary
        Content-Disposition: form-data; name="first"; filename="input.txt"

        // The 'input.txt' file will be uploaded
        < ./input.txt
        --boundary
        Content-Disposition: form-data; name="second"; filename="input-second.txt"

        // A temporary 'input-second.txt' file with the 'Text' content will be created and uploaded
        Text
        --boundary
        Content-Disposition: form-data; name="third";

        // The 'input.txt' file contents will be sent as plain text.
        < ./input.txt
        --boundary--