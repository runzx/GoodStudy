Redis列表

1. List只是一个有序元素的序列：10,20,1,2,3是一个列表。但是，使用数组实现的List的属性与使用链接列表实现的List的属性非常不同 。
    Redis列表通过链接列表实现。这意味着，即使列表中有数百万个元素，在头部或列表尾部添加新元素的操作也会在不变的时间内执行。

2. 命令
    LPUSH命令将一个新元素到一个列表，在左侧（在头部）
        可变参数，这意味着您可以自由地将多个元素在一次调用中推送到一个列表中：
            rpush mylist 1 2 3 4 5 "foo bar"
    RPUSH命令将一个新元素到一个列表，在右侧（在尾部）
    LRANGE命令从列表中提取元素的范围：
        LRANGE需要两个索引，范围的第一个和最后一个元素返回。两个索引都可以是负数，告诉Redis从头开始计数：所以-1是最后一个元素，-2是列表的倒数第二个元素，依此类推。
    lpop 弹出元素是既从列表中检索元素又从列表中消除元素的操作。您可以从左侧和右侧弹出元素，类似于您可以在列表的两侧推送元素：
        如果我们试图弹空表时，这是我们得到的结果：
            > rpop mylist
            (nil)
    LTRIM命令类似于LRANGE，但是，而不是显示元件的指定范围它设置在该范围作为新的列表值。
        给定范围之外的所有元素都被删除。
    阻塞操作:
        有时列表可能是空的，没有任何处理，所以RPOP只返回NULL。在这种情况下，消费者被迫等待一段时间，再次使用RPOP重试。
            这称为轮询，在这种情况下不是一个好主意，因为它有几个缺点：
                1)强制Redis和客户端处理无用的命令（列表为空的所有请求将不会完成实际的工作，它们只会返回NULL）。
                2)给项目的处理增加一个延迟，因为在一个worker收到NULL之后，它会等待一段时间。为了使延迟更小，我们可以在RPOP的调用之间等待较少，从而放大问题1的效果，即对Redis的更多无用的调用。
        BRPOP和BLPOP它们的版本RPOP和LPOP能够阻止如果列表是空的：
            他们将回到只有当新的元素添加到列表中，或者当用户指定超时主叫到达。
                > brpop tasks 5
                1) "tasks"
                2) "do_something"
            这意味着：“等待列表中的元素tasks，但如果5秒后没有元素可用，则返回”。
            可以使用0作为超时来永久等待元素，并且您还可以指定多个列表而不只是一个，以便同时等待多个列表，并在第一个列表接收到元素时得到通知。
            关于BRPOP的几点注意事项：
                1)客户端以有序方式提供服务：第一个阻塞等待列表的客户端首先被某个其他客户端推送，等等。
                2)返回值与RPOP相比是不同的：它是一个二元数组，因为它还包含密钥的名称，因为BRPOP和BLPOP能够阻止等待多个列表中的元素。
                3)s如果达到超时，则返回NULL。
        RPOPLPUSH source destination
            原子性地返回并移除存储在 source 的列表的最后一个元素（列表尾部元素）， 并把该元素放入存储在 destination 的列表的第一个元素位置（列表头部）。
                例如：假设 source 存储着列表 a,b,c， destination存储着列表 x,y,z。 执行 RPOPLPUSH 得到的结果是 source 保存着列表 a,b ，而 destination 保存着列表 c,x,y,z。
                    如果 source 不存在，那么会返回 nil 值，并且不会执行任何操作。 如果 source 和 destination 是同样的，那么这个操作等同于移除列表最后一个元素并且把该元素放在列表头部， 所以这个命令也可以当作是一个旋转列表的命令。
                    ##返回值
                    bulk-string-reply: 被移除和放入的元素
        BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本。 当 source 包含元素的时候，这个命令表现得跟 RPOPLPUSH 一模一样。 当 source 是空的时候，Redis将会阻塞这个连接，直到另一个客户端 push 元素进入或者达到 timeout 时限。 timeout 为 0 能用于无限期阻塞客户端。
