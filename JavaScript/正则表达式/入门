两种方法之一构建一个正则表达式：

1. 使用一个正则表达式字面量，其由包含在斜杠之间的模式组成
    const regex = /ab+c/;
    const regex = /^[a-zA-Z]+[0-9]*\W?_$/gi;

2. 调用RegExp对象的构造函数
    let regex = new RegExp("ab+c");
    let regex = new RegExp(/^[a-zA-Z]+[0-9]*\W?_$/, "gi");

3.  RegExp的exec和test方法以及 String的match、replace、search和split方法。
    方法    描述
    exec	一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）。
    test	一个在字符串中测试是否匹配的RegExp方法，它返回true或false。
    match	一个在字符串中执行查找匹配的String方法，它返回一个数组或者在未匹配到时返回null。
    search	一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。
    replace	一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。
    split	一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。
