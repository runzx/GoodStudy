提交git时自动格式化并通过ESlint检测

需要使用到的npm模块
  prettier    代码格式化模块，和vscode上安装的Vetur扩展工具使用的格式化相同
  husky       git的钩子，在git的hook中执行一些命令
  lint-staged  对git暂存的文件进行lint检查
  eslint      js代码检测工具

配置prettier的规则
在项目更目录新建一个 .prettierrc 文件，
"rules":{
    // 禁止对象字面量中出现重复的 key
    "no-dupe-keys": "error",
    // 禁止出现重复的 case 标签
    "no-duplicate-case": "error",
    // 禁止出现空语句块,允许catch出现空语句
    "no-empty": ["error", {"allowEmptyCatch": true}],
    // 禁止对 catch 子句的参数重新赋值
    "no-ex-assign":"error",
    // 禁止不必要的布尔转换
    "no-extra-boolean-cast": "error",
    // 禁止不必要的分号
    "no-extra-semi": "error",
    // 强制所有控制语句使用一致的括号风格
    "curly": "error"
    
}

在项目中执行(初始化eslint文件)
  ./node_modules/.bin/eslint --init
  在项目自动在根目录新增加了一个.eslintrc.json文件，在rules选项中校验规则：
  "rules":{
    // 禁止对象字面量中出现重复的 key
    "no-dupe-keys": "error",
    // 禁止出现重复的 case 标签
    "no-duplicate-case": "error",
    // 禁止出现空语句块,允许catch出现空语句
    "no-empty": ["error", {"allowEmptyCatch": true}],
    // 禁止对 catch 子句的参数重新赋值
    "no-ex-assign":"error",
    // 禁止不必要的布尔转换
    "no-extra-boolean-cast": "error",
    // 禁止不必要的分号
    "no-extra-semi": "error",
    // 强制所有控制语句使用一致的括号风格
    "curly": "error"
  }

在package.json中增加husky和lint-staged的配置
"husky":{
    "hooks": {
        "pre-commit": "lint-staged"
    }
},
"lint-staged": {
    "src/**": [
        "prettier --config .prettierrc --write",
        "eslint --fix",
        "git add"
    ]
}
