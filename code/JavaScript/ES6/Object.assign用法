ES6中新增的Object.assign()方法

1. Object.assign方法用于对象的合并，方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。
    如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。
        后来的源的属性将类似地覆盖早先的属性。
    只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的[[Get]]和目标对象的[[Set]]，
        所以它会调用相关 getter 和 setter。
    String类型和 Symbol 类型的属性都会被拷贝。

2. 可枚举属性是指那些内部 “可枚举” 标志设置为 true 的属性，
    对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 true，
    对于通过 Object.defineProperty 等定义的属性，该标识值默认为 false。
    可枚举的属性可以通过 for...in 循环进行遍历（除非该属性名是一个 Symbol）
    Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for...in 循环遍历该对象时返回的顺序一致 。
    
    属性的所有权是通过判断该属性是否直接属于某个对象决定的，而不是通过原型链继承的。
        一个对象的所有的属性可以一次性的获取到。
        有一些内置的方法可以用于判断、迭代/枚举以及获取对象的一个或一组属性

功能	自身对象	                                                                                        自身对象及其原型链	仅原型链
判断	可枚举属性	            不可枚举属性	                                    可枚举属性及不可枚举属性

        in 和 hasOwnProperty	in 和 propertyIsEnumerable（判断是否结果为false）	hasOwnProperty	        需要额外代码实现	需要额外代码实现

访问	可枚举属性	            不可枚举属性	                                    可枚举属性及不可枚举属性

        Object.keys	            使用 getOwnPropertyNames 进行迭代，                 getOwnPropertyNames	需要额外代码实现	需要额外代码实现
                                并筛选不通过propertyIsEnumerable方法检测的属性