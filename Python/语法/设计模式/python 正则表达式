python 正则表达式

1. 是特殊字符序列， 一个字符串是否与我们设定的这样的字符序列相匹配
    快速检索文本、实现替换文本操作

2. python 内置函数
    str.index('abc')> -1  包含'abc'
    'abc' in srt 
3. 
    import re
    a = '.sd asdasd'
    res = re.findall('正则表达式',a)     #返回列表
    正则强项1： 对规则的检索
                抽象的检索
4. 正则表达式 组成
    普通字符
    元字符     \n \d
        字符集 [abc] [a-d] [^abc]
        概括字符集   \d 相当于[0-9]，  \D 相当于[^0-9]
                    \w 字母和数字_, 单词字符，等价于[A-Za-z0-9_]  \W 非 包括 空格、& 、\n...
                    \s 空白字符 等价于[\f\n\r\t\v]     
                        \v 匹配一个垂直制表符。等价于 \x0b 和 \cK。
                        \f 匹配一个换页符。等价于 \x0c 和 \cL
                    . 除换行符之外的所有字符\n

        数量词 {n} {n,m}前面字符重复的次数(逗号和两个数之间不能有空格),最小n,最大m
            1）贪婪与 非贪婪
                默认 贪婪匹配方式， 尽可能多匹配，取最大值
                非贪婪 数量词后加?
            2）匹配0次、1次或无限多次
                *   0次或多次
                +   1次或多次
                ?   0次或1次 
            3) 组
                ()          # []里的字符是or或关系， ()里字符是and且关系
5. 匹配模式
    re.I 忽略大小写
    re.S 让.可以匹配\n       
    re.findall('reExpress', str, re.I | re.S)   # re.I | re.S 可以写一起为and关系。
6. 正则替换
    re.sub(pattern, repl, string, count=0, flage=0)    
        count为0时无限替换
        flage 匹配模式
        repl 字符串 或 函数
    python 常规字符串替换
        string = 'abcefg'
        res = string.replace('ab', 'newstr')
7. 把函数当作参数传递
    def convert(value):
        return '结果'
8. 下面2个只匹配一次， re.findall()匹配多次,返回列表
    re.search()     # 搜整串，找到就返回 对象
    re.match()      # 从首字母开始匹配， 返回是对象
        返回对象操作
            res.group()     #匹配的串
            res.span()      #位置
9. group 分组
    re.findall()    # 列表内容是各次匹配结果， 结果里如有分组，则用元组表示
                    # ['', '', ('', '')]
10. 常用正则表达式
    别人写好的，可直接使用     


