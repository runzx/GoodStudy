
函数式编程导论
    Functional Programming
    避免使用共享状态（Shared State）、可变状态（Mutable Data）以及副作用（Side Effects）。
    函数式编程中整个应用由数据驱动，应用的状态在不同纯函数之间流动。
    函数式编程其更偏向于声明式编程，代码更加简洁明了、更可预测，并且可测试性也更好。
1. 纯函数
    仅根据输入参数决定输出并且不会产生任何副作用的函数
        特性之一： 在于其结果的可预测性
            绝大部分纯函数应该拥有一或多个参数值。
            纯函数必须要有返回值。
            相同输入的纯函数的返回值必须一致。
            纯函数不能够产生任何的副作用。
    常见的副作用包括但不限于：
        修改任何外部变量或者外部对象属性
        在控制台中输出日志
        写入文件
        发起网络通信
        触发任何外部进程事件
        调用任何其他具有副作用的函数

2. 高阶函数 （Higher Order Function）则是能够接受函数作为参数，能够返回某个函数作为返回值的函数。
    高阶函数经常用在如下场景：
        利用回调函数、Promise或者Monad来抽象或者隔离动作、作用以及任何的异步控制流
        构建能够作用于泛数据类型的工具函数
        函数重用或者创建柯里函数
        将输入的多个函数并且返回这些函数复合而来的复合函数
    典型的高阶函数的应用就是复合函数
        函数复合（Function Composition）