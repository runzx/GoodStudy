
使用Artisan生成PHPDoc辅助文件

    在安装Laravel IDE Helper之后，我们能够使用artisan生成PhpStorm 以及 Laravel用来提供代码补全和定位的PHPDoc辅助文件
    最容易的操作方法就是就是在command line tool功能中开启对artisan的支持。
        settings——Tools | Command Line Tool Support——添加一个新的命令行。
            Path to script: 选根目录下artisan.
        这个工具基于Symfony Console，因此我们接下来需要提供artisan命令的路径。
        保存之后, 我们即可在IDE内使用artisan命令. Tools | Run Command… (Ctrl+Shift+X or CMD+Shift+X on Mac OS X) 提供了对所有可以执行的artisan命令的自动补全。
        运行artisan ide-helper:generate 命令可以生成必要的 PHPDoc信息。

安装并启用Laravel Plugin
     Settings (Preferences) | Plugins 菜单下, 点击Browse repositories… 按钮，然后搜索’Laravel’，我们即可点击安装按钮进行安装
     该插件提供的自动完成与代码定位功能，有任何问题，可以选择菜单中的File | Invalidate Caches / Restart来重新建立项目索引。此外在遇到这种问题时，
        我们还可以尝试运行一下artisan clear-compiled 和 artisan ide-helper:generate
    1.首先是控制器和路由的代码自动完成与定位。C+space
        使用Laravel框架的Redirect和Route的一些功能时非常有用。
    2.视图的自动完成和定位
        View facade, 我们能够引入一个Blade 视图文件. Laravel 插件提供了视图名称的自动完成功能。
    3.Configuration 和 Services的自动完成与定位
        Configuration facade的时候,获取定义在我们的应用配置文件中的各种key。
        各种provider也提供了同样的功能
    4.语言翻译的自动完成与定位
        Lang facade的时候，我们可以获取应用中翻译过的字符串。在安装了Laravel的插件后，我们在使用Lang::get()方法时，再按Ctrl+Space (CMD+Space on Mac OS X)键，这将会为我们提供各种翻译的自动完成功能。
    5.自动配置符合 PSR-4 规范的命名空间
    
PhpStorm 中的 Blade 模版支持
    1.花括号和指令的自动完成
    2.Sections 支持
    3.Extends 和 Includes命令的代码自动完成和定位

四、使用Live Templates来生成代码
    在下载并安装 PhpStorm Laravel Live Templates之后, 我们能够扩充标准的live templates，包括以下这些：
        Blade 指令
        Input 和 Request 片段
        Cookie 片段
        Route 片段
        视图, 响应 和 重定向模版
        代码规范 (包括列类型)
        缓存
        表单 and session 片段
五、支持 Artisan 和 Composer的命令行工具
    Laravel 内置了一个命令行工具，可以用来执行清楚缓存，生成代码，数据库迁移等各种任务. 
    PhpStorm 能够 扫描artisan暴露出来的所有命令，包括我们添加到项目中的一些自定义 service providers。
    点击 Tools | Run Command… 菜单 (Ctrl+Shift+X or CMD+Shift+X on Mac OS X) 打开命令行工具控制台, 我们就看一看到 artisan 以及其所有可用的命令。
    