 ES6 javascript对象方法Object.assign()

1. 用于对象的合并，将源对象（ source ）的所有可枚举属性，复制到目标对象（ target ）
    Object.assign(target, source1, source2); 

        由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。
        如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。
        除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。
        只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。
        var v1 = 'abc';  
        var v2 = true;  
        var v3 = 10;  
        var obj = Object.assign({}, v1, v2, v3);  
        console.log(obj); // { "0": "a", "1": "b", "2": "c" }  
        上面代码中，v1、v2、v3分别是字符串、布尔值和数值，结果只有字符串

        Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。
        对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。

        Object.assign([1, 2, 3], [4, 5])  
        // [4, 5, 3]  
        上面代码中，Object.assign把数组视为属性名为 0 、 1 、 2 的对象，因此目标数组的 0 号属性4覆盖了原数组的 0 号属性1。

        （ 1 ）为对象添加属性
        class Point {  
            constructor(x, y) {  
                Object.assign(this, {x, y});  
            }  
        }   // 将x属性和y属性添加到Point类的对象实例。
